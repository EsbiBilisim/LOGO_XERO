//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace LOGO_XERO.LogoServis {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PostBoxServiceEndpoint", Namespace="http://tempuri.org/")]
    public partial class PostBoxServiceEndpoint : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetVersionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiagnosisResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ALiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEnvelopeOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendApplicationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEnvelopeExOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendInvoiceExOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSignedInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendApplicationResponseExOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEArchiveDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveDoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveInvoiceDoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveApplicationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveApplicationResponseDoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback getApplicationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvoiceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAppRespStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEnvelopeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEnvelopeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvoiceListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserListNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback getApprovalFlowListOperationCompleted;
        
        private System.Threading.SendOrPostCallback setApprovalFlowIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getApprovalFlowResOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentStatusExOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEArchiveXsltOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvoiceApplicationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvoiceResponseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback setApplicationResponseOptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEArchiveInvoicePdfDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getReconciliationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendReconciliationReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback createElementIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelEArchiveInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEArchiveListForReconcilitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentDoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentStatusBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetValidateGIBUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckGibUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMailStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get2FACodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get5K30KCancelObjectionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserAccountServicesByVknTcknOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkAsUnreceivedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListWithDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrefixLastNumberListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateVUK507ServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReceiverInfoFromTurmobOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PostBoxServiceEndpoint() {
            this.Url = global::LOGO_XERO.Properties.Settings.Default.LOGO_XERO_LogoServis_PostBoxService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetVersionsCompletedEventHandler GetVersionsCompleted;
        
        /// <remarks/>
        public event GetDiagnosisResultCompletedEventHandler GetDiagnosisResultCompleted;
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event ALiveCompletedEventHandler ALiveCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event sendEnvelopeCompletedEventHandler sendEnvelopeCompleted;
        
        /// <remarks/>
        public event sendInvoiceCompletedEventHandler sendInvoiceCompleted;
        
        /// <remarks/>
        public event sendApplicationResponseCompletedEventHandler sendApplicationResponseCompleted;
        
        /// <remarks/>
        public event sendEnvelopeExCompletedEventHandler sendEnvelopeExCompleted;
        
        /// <remarks/>
        public event sendInvoiceExCompletedEventHandler sendInvoiceExCompleted;
        
        /// <remarks/>
        public event sendSignedInvoiceCompletedEventHandler sendSignedInvoiceCompleted;
        
        /// <remarks/>
        public event sendApplicationResponseExCompletedEventHandler sendApplicationResponseExCompleted;
        
        /// <remarks/>
        public event sendEArchiveDocumentCompletedEventHandler sendEArchiveDocumentCompleted;
        
        /// <remarks/>
        public event receiveDocumentCompletedEventHandler receiveDocumentCompleted;
        
        /// <remarks/>
        public event receiveDoneCompletedEventHandler receiveDoneCompleted;
        
        /// <remarks/>
        public event receiveInvoiceCompletedEventHandler receiveInvoiceCompleted;
        
        /// <remarks/>
        public event receiveInvoiceDoneCompletedEventHandler receiveInvoiceDoneCompleted;
        
        /// <remarks/>
        public event receiveApplicationResponseCompletedEventHandler receiveApplicationResponseCompleted;
        
        /// <remarks/>
        public event receiveApplicationResponseDoneCompletedEventHandler receiveApplicationResponseDoneCompleted;
        
        /// <remarks/>
        public event getApplicationResponseCompletedEventHandler getApplicationResponseCompleted;
        
        /// <remarks/>
        public event getInvoiceStatusCompletedEventHandler getInvoiceStatusCompleted;
        
        /// <remarks/>
        public event getAppRespStatusCompletedEventHandler getAppRespStatusCompleted;
        
        /// <remarks/>
        public event getEnvelopeListCompletedEventHandler getEnvelopeListCompleted;
        
        /// <remarks/>
        public event getEnvelopeCompletedEventHandler getEnvelopeCompleted;
        
        /// <remarks/>
        public event getInvoiceListCompletedEventHandler getInvoiceListCompleted;
        
        /// <remarks/>
        public event getInvoiceCompletedEventHandler getInvoiceCompleted;
        
        /// <remarks/>
        public event getUserListCompletedEventHandler getUserListCompleted;
        
        /// <remarks/>
        public event getUserListNewCompletedEventHandler getUserListNewCompleted;
        
        /// <remarks/>
        public event getApprovalFlowListCompletedEventHandler getApprovalFlowListCompleted;
        
        /// <remarks/>
        public event setApprovalFlowIdCompletedEventHandler setApprovalFlowIdCompleted;
        
        /// <remarks/>
        public event getApprovalFlowResCompletedEventHandler getApprovalFlowResCompleted;
        
        /// <remarks/>
        public event getDocumentStatusCompletedEventHandler getDocumentStatusCompleted;
        
        /// <remarks/>
        public event getDocumentStatusExCompletedEventHandler getDocumentStatusExCompleted;
        
        /// <remarks/>
        public event getEArchiveXsltCompletedEventHandler getEArchiveXsltCompleted;
        
        /// <remarks/>
        public event getInvoiceApplicationResponseCompletedEventHandler getInvoiceApplicationResponseCompleted;
        
        /// <remarks/>
        public event getInvoiceResponseDataCompletedEventHandler getInvoiceResponseDataCompleted;
        
        /// <remarks/>
        public event setApplicationResponseOptionCompletedEventHandler setApplicationResponseOptionCompleted;
        
        /// <remarks/>
        public event getEArchiveInvoicePdfDataCompletedEventHandler getEArchiveInvoicePdfDataCompleted;
        
        /// <remarks/>
        public event getDocumentDataCompletedEventHandler getDocumentDataCompleted;
        
        /// <remarks/>
        public event getReconciliationListCompletedEventHandler getReconciliationListCompleted;
        
        /// <remarks/>
        public event sendReconciliationReportCompletedEventHandler sendReconciliationReportCompleted;
        
        /// <remarks/>
        public event createElementIdCompletedEventHandler createElementIdCompleted;
        
        /// <remarks/>
        public event cancelEArchiveInvoiceCompletedEventHandler cancelEArchiveInvoiceCompleted;
        
        /// <remarks/>
        public event SendEArchiveListForReconcilitionCompletedEventHandler SendEArchiveListForReconcilitionCompleted;
        
        /// <remarks/>
        public event SendDocumentCompletedEventHandler SendDocumentCompleted;
        
        /// <remarks/>
        public event GetDocumentCompletedEventHandler GetDocumentCompleted;
        
        /// <remarks/>
        public event GetDocumentDoneCompletedEventHandler GetDocumentDoneCompleted;
        
        /// <remarks/>
        public event GetDocumentStatusCompletedEventHandler GetDocumentStatusCompleted;
        
        /// <remarks/>
        public event GetDocumentStatusBatchCompletedEventHandler GetDocumentStatusBatchCompleted;
        
        /// <remarks/>
        public event GetDocumentDataCompletedEventHandler GetDocumentDataCompleted;
        
        /// <remarks/>
        public event GetDocumentListCompletedEventHandler GetDocumentListCompleted;
        
        /// <remarks/>
        public event GetReportListCompletedEventHandler GetReportListCompleted;
        
        /// <remarks/>
        public event GetValidateGIBUserCompletedEventHandler GetValidateGIBUserCompleted;
        
        /// <remarks/>
        public event CheckGibUserCompletedEventHandler CheckGibUserCompleted;
        
        /// <remarks/>
        public event GetMailStatusCompletedEventHandler GetMailStatusCompleted;
        
        /// <remarks/>
        public event Get2FACodeCompletedEventHandler Get2FACodeCompleted;
        
        /// <remarks/>
        public event Get5K30KCancelObjectionStatusCompletedEventHandler Get5K30KCancelObjectionStatusCompleted;
        
        /// <remarks/>
        public event GetUserAccountServicesByVknTcknCompletedEventHandler GetUserAccountServicesByVknTcknCompleted;
        
        /// <remarks/>
        public event MarkAsUnreceivedCompletedEventHandler MarkAsUnreceivedCompleted;
        
        /// <remarks/>
        public event GetDocumentListWithDepartmentCompletedEventHandler GetDocumentListWithDepartmentCompleted;
        
        /// <remarks/>
        public event GetPrefixLastNumberListCompletedEventHandler GetPrefixLastNumberListCompleted;
        
        /// <remarks/>
        public event ActivateVUK507ServicesCompletedEventHandler ActivateVUK507ServicesCompleted;
        
        /// <remarks/>
        public event GetReceiverInfoFromTurmobCompletedEventHandler GetReceiverInfoFromTurmobCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICommonEndpoints/GetVersions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ServiceVersionResult GetVersions() {
            object[] results = this.Invoke("GetVersions", new object[0]);
            return ((ServiceVersionResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionsAsync() {
            this.GetVersionsAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionsAsync(object userState) {
            if ((this.GetVersionsOperationCompleted == null)) {
                this.GetVersionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionsOperationCompleted);
            }
            this.InvokeAsync("GetVersions", new object[0], this.GetVersionsOperationCompleted, userState);
        }
        
        private void OnGetVersionsOperationCompleted(object arg) {
            if ((this.GetVersionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionsCompleted(this, new GetVersionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICommonEndpoints/GetDiagnosisResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DiagnosticParameter GetDiagnosisResult() {
            object[] results = this.Invoke("GetDiagnosisResult", new object[0]);
            return ((DiagnosticParameter)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiagnosisResultAsync() {
            this.GetDiagnosisResultAsync(null);
        }
        
        /// <remarks/>
        public void GetDiagnosisResultAsync(object userState) {
            if ((this.GetDiagnosisResultOperationCompleted == null)) {
                this.GetDiagnosisResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiagnosisResultOperationCompleted);
            }
            this.InvokeAsync("GetDiagnosisResult", new object[0], this.GetDiagnosisResultOperationCompleted, userState);
        }
        
        private void OnGetDiagnosisResultOperationCompleted(object arg) {
            if ((this.GetDiagnosisResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiagnosisResultCompleted(this, new GetDiagnosisResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/Ping", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        /// <remarks/>
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/ALive", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ALive([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string key) {
            object[] results = this.Invoke("ALive", new object[] {
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ALiveAsync(string key) {
            this.ALiveAsync(key, null);
        }
        
        /// <remarks/>
        public void ALiveAsync(string key, object userState) {
            if ((this.ALiveOperationCompleted == null)) {
                this.ALiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnALiveOperationCompleted);
            }
            this.InvokeAsync("ALive", new object[] {
                        key}, this.ALiveOperationCompleted, userState);
        }
        
        private void OnALiveOperationCompleted(object arg) {
            if ((this.ALiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ALiveCompleted(this, new ALiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Login([System.Xml.Serialization.XmlElementAttribute("login", IsNullable=true)] LoginType login1, out bool LoginResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool LoginResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string sessionID) {
            object[] results = this.Invoke("Login", new object[] {
                        login1});
            LoginResult = ((bool)(results[0]));
            LoginResultSpecified = ((bool)(results[1]));
            sessionID = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void LoginAsync(LoginType login1) {
            this.LoginAsync(login1, null);
        }
        
        /// <remarks/>
        public void LoginAsync(LoginType login1, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        login1}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/Logout", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logout([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID) {
            this.Invoke("Logout", new object[] {
                        sessionID});
        }
        
        /// <remarks/>
        public void LogoutAsync(string sessionID) {
            this.LogoutAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void LogoutAsync(string sessionID, object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[] {
                        sessionID}, this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendEnvelope", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendEnvelope([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType envelope, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool sendEnvelopeResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendEnvelopeResultSpecified) {
            object[] results = this.Invoke("sendEnvelope", new object[] {
                        envelope,
                        sessionID});
            sendEnvelopeResult = ((bool)(results[0]));
            sendEnvelopeResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendEnvelopeAsync(DocumentType envelope, string sessionID) {
            this.sendEnvelopeAsync(envelope, sessionID, null);
        }
        
        /// <remarks/>
        public void sendEnvelopeAsync(DocumentType envelope, string sessionID, object userState) {
            if ((this.sendEnvelopeOperationCompleted == null)) {
                this.sendEnvelopeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEnvelopeOperationCompleted);
            }
            this.InvokeAsync("sendEnvelope", new object[] {
                        envelope,
                        sessionID}, this.sendEnvelopeOperationCompleted, userState);
        }
        
        private void OnsendEnvelopeOperationCompleted(object arg) {
            if ((this.sendEnvelopeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEnvelopeCompleted(this, new sendEnvelopeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendInvoice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType invoice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string alias, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool sendInvoiceResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendInvoiceResultSpecified) {
            object[] results = this.Invoke("sendInvoice", new object[] {
                        invoice,
                        alias,
                        sessionID});
            sendInvoiceResult = ((bool)(results[0]));
            sendInvoiceResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendInvoiceAsync(DocumentType invoice, string alias, string sessionID) {
            this.sendInvoiceAsync(invoice, alias, sessionID, null);
        }
        
        /// <remarks/>
        public void sendInvoiceAsync(DocumentType invoice, string alias, string sessionID, object userState) {
            if ((this.sendInvoiceOperationCompleted == null)) {
                this.sendInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendInvoiceOperationCompleted);
            }
            this.InvokeAsync("sendInvoice", new object[] {
                        invoice,
                        alias,
                        sessionID}, this.sendInvoiceOperationCompleted, userState);
        }
        
        private void OnsendInvoiceOperationCompleted(object arg) {
            if ((this.sendInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendInvoiceCompleted(this, new sendInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendApplicationResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendApplicationResponse([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType appResp, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string alias, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool sendApplicationResponseResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendApplicationResponseResultSpecified) {
            object[] results = this.Invoke("sendApplicationResponse", new object[] {
                        appResp,
                        alias,
                        sessionID});
            sendApplicationResponseResult = ((bool)(results[0]));
            sendApplicationResponseResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendApplicationResponseAsync(DocumentType appResp, string alias, string sessionID) {
            this.sendApplicationResponseAsync(appResp, alias, sessionID, null);
        }
        
        /// <remarks/>
        public void sendApplicationResponseAsync(DocumentType appResp, string alias, string sessionID, object userState) {
            if ((this.sendApplicationResponseOperationCompleted == null)) {
                this.sendApplicationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendApplicationResponseOperationCompleted);
            }
            this.InvokeAsync("sendApplicationResponse", new object[] {
                        appResp,
                        alias,
                        sessionID}, this.sendApplicationResponseOperationCompleted, userState);
        }
        
        private void OnsendApplicationResponseOperationCompleted(object arg) {
            if ((this.sendApplicationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendApplicationResponseCompleted(this, new sendApplicationResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendEnvelopeEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendEnvelopeEx([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType envelope, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long sendEnvelopeExResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendEnvelopeExResultSpecified) {
            object[] results = this.Invoke("sendEnvelopeEx", new object[] {
                        envelope,
                        sessionID});
            sendEnvelopeExResult = ((long)(results[0]));
            sendEnvelopeExResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendEnvelopeExAsync(DocumentType envelope, string sessionID) {
            this.sendEnvelopeExAsync(envelope, sessionID, null);
        }
        
        /// <remarks/>
        public void sendEnvelopeExAsync(DocumentType envelope, string sessionID, object userState) {
            if ((this.sendEnvelopeExOperationCompleted == null)) {
                this.sendEnvelopeExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEnvelopeExOperationCompleted);
            }
            this.InvokeAsync("sendEnvelopeEx", new object[] {
                        envelope,
                        sessionID}, this.sendEnvelopeExOperationCompleted, userState);
        }
        
        private void OnsendEnvelopeExOperationCompleted(object arg) {
            if ((this.sendEnvelopeExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEnvelopeExCompleted(this, new sendEnvelopeExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendInvoiceEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendInvoiceEx([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType invoice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string alias, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long sendInvoiceExResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendInvoiceExResultSpecified) {
            object[] results = this.Invoke("sendInvoiceEx", new object[] {
                        invoice,
                        alias,
                        sessionID});
            sendInvoiceExResult = ((long)(results[0]));
            sendInvoiceExResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendInvoiceExAsync(DocumentType invoice, string alias, string sessionID) {
            this.sendInvoiceExAsync(invoice, alias, sessionID, null);
        }
        
        /// <remarks/>
        public void sendInvoiceExAsync(DocumentType invoice, string alias, string sessionID, object userState) {
            if ((this.sendInvoiceExOperationCompleted == null)) {
                this.sendInvoiceExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendInvoiceExOperationCompleted);
            }
            this.InvokeAsync("sendInvoiceEx", new object[] {
                        invoice,
                        alias,
                        sessionID}, this.sendInvoiceExOperationCompleted, userState);
        }
        
        private void OnsendInvoiceExOperationCompleted(object arg) {
            if ((this.sendInvoiceExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendInvoiceExCompleted(this, new sendInvoiceExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendSignedInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendSignedInvoice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType invoice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string alias, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long sendSignedInvoiceResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendSignedInvoiceResultSpecified) {
            object[] results = this.Invoke("sendSignedInvoice", new object[] {
                        invoice,
                        alias,
                        sessionID});
            sendSignedInvoiceResult = ((long)(results[0]));
            sendSignedInvoiceResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendSignedInvoiceAsync(DocumentType invoice, string alias, string sessionID) {
            this.sendSignedInvoiceAsync(invoice, alias, sessionID, null);
        }
        
        /// <remarks/>
        public void sendSignedInvoiceAsync(DocumentType invoice, string alias, string sessionID, object userState) {
            if ((this.sendSignedInvoiceOperationCompleted == null)) {
                this.sendSignedInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSignedInvoiceOperationCompleted);
            }
            this.InvokeAsync("sendSignedInvoice", new object[] {
                        invoice,
                        alias,
                        sessionID}, this.sendSignedInvoiceOperationCompleted, userState);
        }
        
        private void OnsendSignedInvoiceOperationCompleted(object arg) {
            if ((this.sendSignedInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSignedInvoiceCompleted(this, new sendSignedInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendApplicationResponseEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendApplicationResponseEx([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType appResp, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string alias, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long sendApplicationResponseExResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendApplicationResponseExResultSpecified) {
            object[] results = this.Invoke("sendApplicationResponseEx", new object[] {
                        appResp,
                        alias,
                        sessionID});
            sendApplicationResponseExResult = ((long)(results[0]));
            sendApplicationResponseExResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendApplicationResponseExAsync(DocumentType appResp, string alias, string sessionID) {
            this.sendApplicationResponseExAsync(appResp, alias, sessionID, null);
        }
        
        /// <remarks/>
        public void sendApplicationResponseExAsync(DocumentType appResp, string alias, string sessionID, object userState) {
            if ((this.sendApplicationResponseExOperationCompleted == null)) {
                this.sendApplicationResponseExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendApplicationResponseExOperationCompleted);
            }
            this.InvokeAsync("sendApplicationResponseEx", new object[] {
                        appResp,
                        alias,
                        sessionID}, this.sendApplicationResponseExOperationCompleted, userState);
        }
        
        private void OnsendApplicationResponseExOperationCompleted(object arg) {
            if ((this.sendApplicationResponseExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendApplicationResponseExCompleted(this, new sendApplicationResponseExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendEArchiveDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendEArchiveDocument([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType document, EArchiveDocumentTypes docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified, bool isSigned, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isSignedSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xsltUuid, out long sendEArchiveDocumentResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendEArchiveDocumentResultSpecified) {
            object[] results = this.Invoke("sendEArchiveDocument", new object[] {
                        document,
                        docType,
                        docTypeSpecified,
                        isSigned,
                        isSignedSpecified,
                        sessionID,
                        xsltUuid});
            sendEArchiveDocumentResult = ((long)(results[0]));
            sendEArchiveDocumentResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendEArchiveDocumentAsync(DocumentType document, EArchiveDocumentTypes docType, bool docTypeSpecified, bool isSigned, bool isSignedSpecified, string sessionID, string xsltUuid) {
            this.sendEArchiveDocumentAsync(document, docType, docTypeSpecified, isSigned, isSignedSpecified, sessionID, xsltUuid, null);
        }
        
        /// <remarks/>
        public void sendEArchiveDocumentAsync(DocumentType document, EArchiveDocumentTypes docType, bool docTypeSpecified, bool isSigned, bool isSignedSpecified, string sessionID, string xsltUuid, object userState) {
            if ((this.sendEArchiveDocumentOperationCompleted == null)) {
                this.sendEArchiveDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEArchiveDocumentOperationCompleted);
            }
            this.InvokeAsync("sendEArchiveDocument", new object[] {
                        document,
                        docType,
                        docTypeSpecified,
                        isSigned,
                        isSignedSpecified,
                        sessionID,
                        xsltUuid}, this.sendEArchiveDocumentOperationCompleted, userState);
        }
        
        private void OnsendEArchiveDocumentOperationCompleted(object arg) {
            if ((this.sendEArchiveDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEArchiveDocumentCompleted(this, new sendEArchiveDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveDocument([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool receiveDocumentResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveDocumentResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("receiveDocument", new object[] {
                        sessionID});
            receiveDocumentResult = ((bool)(results[0]));
            receiveDocumentResultSpecified = ((bool)(results[1]));
            document = ((DocumentType)(results[2]));
        }
        
        /// <remarks/>
        public void receiveDocumentAsync(string sessionID) {
            this.receiveDocumentAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void receiveDocumentAsync(string sessionID, object userState) {
            if ((this.receiveDocumentOperationCompleted == null)) {
                this.receiveDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveDocumentOperationCompleted);
            }
            this.InvokeAsync("receiveDocument", new object[] {
                        sessionID}, this.receiveDocumentOperationCompleted, userState);
        }
        
        private void OnreceiveDocumentOperationCompleted(object arg) {
            if ((this.receiveDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveDocumentCompleted(this, new receiveDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveDone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveDone([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long receiveDoneResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveDoneResultSpecified) {
            object[] results = this.Invoke("receiveDone", new object[] {
                        fileID,
                        sessionID});
            receiveDoneResult = ((long)(results[0]));
            receiveDoneResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveDoneAsync(string fileID, string sessionID) {
            this.receiveDoneAsync(fileID, sessionID, null);
        }
        
        /// <remarks/>
        public void receiveDoneAsync(string fileID, string sessionID, object userState) {
            if ((this.receiveDoneOperationCompleted == null)) {
                this.receiveDoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveDoneOperationCompleted);
            }
            this.InvokeAsync("receiveDone", new object[] {
                        fileID,
                        sessionID}, this.receiveDoneOperationCompleted, userState);
        }
        
        private void OnreceiveDoneOperationCompleted(object arg) {
            if ((this.receiveDoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveDoneCompleted(this, new receiveDoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveInvoice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool receiveInvoiceResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveInvoiceResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out ElementType document) {
            object[] results = this.Invoke("receiveInvoice", new object[] {
                        sessionID});
            receiveInvoiceResult = ((bool)(results[0]));
            receiveInvoiceResultSpecified = ((bool)(results[1]));
            document = ((ElementType)(results[2]));
        }
        
        /// <remarks/>
        public void receiveInvoiceAsync(string sessionID) {
            this.receiveInvoiceAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void receiveInvoiceAsync(string sessionID, object userState) {
            if ((this.receiveInvoiceOperationCompleted == null)) {
                this.receiveInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveInvoiceOperationCompleted);
            }
            this.InvokeAsync("receiveInvoice", new object[] {
                        sessionID}, this.receiveInvoiceOperationCompleted, userState);
        }
        
        private void OnreceiveInvoiceOperationCompleted(object arg) {
            if ((this.receiveInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveInvoiceCompleted(this, new receiveInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveInvoiceDone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveInvoiceDone([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long receiveInvoiceDoneResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveInvoiceDoneResultSpecified) {
            object[] results = this.Invoke("receiveInvoiceDone", new object[] {
                        uuid,
                        sessionID});
            receiveInvoiceDoneResult = ((long)(results[0]));
            receiveInvoiceDoneResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveInvoiceDoneAsync(string uuid, string sessionID) {
            this.receiveInvoiceDoneAsync(uuid, sessionID, null);
        }
        
        /// <remarks/>
        public void receiveInvoiceDoneAsync(string uuid, string sessionID, object userState) {
            if ((this.receiveInvoiceDoneOperationCompleted == null)) {
                this.receiveInvoiceDoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveInvoiceDoneOperationCompleted);
            }
            this.InvokeAsync("receiveInvoiceDone", new object[] {
                        uuid,
                        sessionID}, this.receiveInvoiceDoneOperationCompleted, userState);
        }
        
        private void OnreceiveInvoiceDoneOperationCompleted(object arg) {
            if ((this.receiveInvoiceDoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveInvoiceDoneCompleted(this, new receiveInvoiceDoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveApplicationResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveApplicationResponse([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool receiveApplicationResponseResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveApplicationResponseResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out ElementType document) {
            object[] results = this.Invoke("receiveApplicationResponse", new object[] {
                        sessionID});
            receiveApplicationResponseResult = ((bool)(results[0]));
            receiveApplicationResponseResultSpecified = ((bool)(results[1]));
            document = ((ElementType)(results[2]));
        }
        
        /// <remarks/>
        public void receiveApplicationResponseAsync(string sessionID) {
            this.receiveApplicationResponseAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void receiveApplicationResponseAsync(string sessionID, object userState) {
            if ((this.receiveApplicationResponseOperationCompleted == null)) {
                this.receiveApplicationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveApplicationResponseOperationCompleted);
            }
            this.InvokeAsync("receiveApplicationResponse", new object[] {
                        sessionID}, this.receiveApplicationResponseOperationCompleted, userState);
        }
        
        private void OnreceiveApplicationResponseOperationCompleted(object arg) {
            if ((this.receiveApplicationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveApplicationResponseCompleted(this, new receiveApplicationResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveApplicationResponseDone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveApplicationResponseDone([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long receiveApplicationResponseDoneResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveApplicationResponseDoneResultSpecified) {
            object[] results = this.Invoke("receiveApplicationResponseDone", new object[] {
                        uuid,
                        sessionID});
            receiveApplicationResponseDoneResult = ((long)(results[0]));
            receiveApplicationResponseDoneResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveApplicationResponseDoneAsync(string uuid, string sessionID) {
            this.receiveApplicationResponseDoneAsync(uuid, sessionID, null);
        }
        
        /// <remarks/>
        public void receiveApplicationResponseDoneAsync(string uuid, string sessionID, object userState) {
            if ((this.receiveApplicationResponseDoneOperationCompleted == null)) {
                this.receiveApplicationResponseDoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveApplicationResponseDoneOperationCompleted);
            }
            this.InvokeAsync("receiveApplicationResponseDone", new object[] {
                        uuid,
                        sessionID}, this.receiveApplicationResponseDoneOperationCompleted, userState);
        }
        
        private void OnreceiveApplicationResponseDoneOperationCompleted(object arg) {
            if ((this.receiveApplicationResponseDoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveApplicationResponseDoneCompleted(this, new receiveApplicationResponseDoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getApplicationResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getApplicationResponse([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string envelopeID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getApplicationResponseResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getApplicationResponseResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("getApplicationResponse", new object[] {
                        envelopeID,
                        sessionID});
            getApplicationResponseResult = ((bool)(results[0]));
            getApplicationResponseResultSpecified = ((bool)(results[1]));
            document = ((DocumentType)(results[2]));
        }
        
        /// <remarks/>
        public void getApplicationResponseAsync(string envelopeID, string sessionID) {
            this.getApplicationResponseAsync(envelopeID, sessionID, null);
        }
        
        /// <remarks/>
        public void getApplicationResponseAsync(string envelopeID, string sessionID, object userState) {
            if ((this.getApplicationResponseOperationCompleted == null)) {
                this.getApplicationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetApplicationResponseOperationCompleted);
            }
            this.InvokeAsync("getApplicationResponse", new object[] {
                        envelopeID,
                        sessionID}, this.getApplicationResponseOperationCompleted, userState);
        }
        
        private void OngetApplicationResponseOperationCompleted(object arg) {
            if ((this.getApplicationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getApplicationResponseCompleted(this, new getApplicationResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getInvoiceStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getInvoiceStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getInvoiceStatusResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getInvoiceStatusResultSpecified, out InvoiceStatus status, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool statusSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusDescription, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string envelopeId) {
            object[] results = this.Invoke("getInvoiceStatus", new object[] {
                        uuid,
                        sessionID});
            getInvoiceStatusResult = ((bool)(results[0]));
            getInvoiceStatusResultSpecified = ((bool)(results[1]));
            status = ((InvoiceStatus)(results[2]));
            statusSpecified = ((bool)(results[3]));
            statusDescription = ((string)(results[4]));
            envelopeId = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void getInvoiceStatusAsync(string uuid, string sessionID) {
            this.getInvoiceStatusAsync(uuid, sessionID, null);
        }
        
        /// <remarks/>
        public void getInvoiceStatusAsync(string uuid, string sessionID, object userState) {
            if ((this.getInvoiceStatusOperationCompleted == null)) {
                this.getInvoiceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvoiceStatusOperationCompleted);
            }
            this.InvokeAsync("getInvoiceStatus", new object[] {
                        uuid,
                        sessionID}, this.getInvoiceStatusOperationCompleted, userState);
        }
        
        private void OngetInvoiceStatusOperationCompleted(object arg) {
            if ((this.getInvoiceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvoiceStatusCompleted(this, new getInvoiceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getAppRespStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getAppRespStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getAppRespStatusResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getAppRespStatusResultSpecified, out AppRespStatus status, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool statusSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusDescription, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string envelopeId) {
            object[] results = this.Invoke("getAppRespStatus", new object[] {
                        uuid,
                        sessionID});
            getAppRespStatusResult = ((bool)(results[0]));
            getAppRespStatusResultSpecified = ((bool)(results[1]));
            status = ((AppRespStatus)(results[2]));
            statusSpecified = ((bool)(results[3]));
            statusDescription = ((string)(results[4]));
            envelopeId = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void getAppRespStatusAsync(string uuid, string sessionID) {
            this.getAppRespStatusAsync(uuid, sessionID, null);
        }
        
        /// <remarks/>
        public void getAppRespStatusAsync(string uuid, string sessionID, object userState) {
            if ((this.getAppRespStatusOperationCompleted == null)) {
                this.getAppRespStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAppRespStatusOperationCompleted);
            }
            this.InvokeAsync("getAppRespStatus", new object[] {
                        uuid,
                        sessionID}, this.getAppRespStatusOperationCompleted, userState);
        }
        
        private void OngetAppRespStatusOperationCompleted(object arg) {
            if ((this.getAppRespStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAppRespStatusCompleted(this, new getAppRespStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getEnvelopeList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] getEnvelopeList(System.DateTime beginDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool beginDateSpecified, System.DateTime endDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool endDateSpecified, SendRecvType opType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool opTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, PostBoxDateType dateBy, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dateBySpecified) {
            object[] results = this.Invoke("getEnvelopeList", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        opType,
                        opTypeSpecified,
                        sessionID,
                        dateBy,
                        dateBySpecified});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getEnvelopeListAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, SendRecvType opType, bool opTypeSpecified, string sessionID, PostBoxDateType dateBy, bool dateBySpecified) {
            this.getEnvelopeListAsync(beginDate, beginDateSpecified, endDate, endDateSpecified, opType, opTypeSpecified, sessionID, dateBy, dateBySpecified, null);
        }
        
        /// <remarks/>
        public void getEnvelopeListAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, SendRecvType opType, bool opTypeSpecified, string sessionID, PostBoxDateType dateBy, bool dateBySpecified, object userState) {
            if ((this.getEnvelopeListOperationCompleted == null)) {
                this.getEnvelopeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEnvelopeListOperationCompleted);
            }
            this.InvokeAsync("getEnvelopeList", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        opType,
                        opTypeSpecified,
                        sessionID,
                        dateBy,
                        dateBySpecified}, this.getEnvelopeListOperationCompleted, userState);
        }
        
        private void OngetEnvelopeListOperationCompleted(object arg) {
            if ((this.getEnvelopeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEnvelopeListCompleted(this, new getEnvelopeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getEnvelope", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getEnvelope([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string envelopeID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID) {
            object[] results = this.Invoke("getEnvelope", new object[] {
                        envelopeID,
                        sessionID});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getEnvelopeAsync(string envelopeID, string sessionID) {
            this.getEnvelopeAsync(envelopeID, sessionID, null);
        }
        
        /// <remarks/>
        public void getEnvelopeAsync(string envelopeID, string sessionID, object userState) {
            if ((this.getEnvelopeOperationCompleted == null)) {
                this.getEnvelopeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEnvelopeOperationCompleted);
            }
            this.InvokeAsync("getEnvelope", new object[] {
                        envelopeID,
                        sessionID}, this.getEnvelopeOperationCompleted, userState);
        }
        
        private void OngetEnvelopeOperationCompleted(object arg) {
            if ((this.getEnvelopeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEnvelopeCompleted(this, new getEnvelopeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getInvoiceList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] getInvoiceList(System.DateTime beginDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool beginDateSpecified, System.DateTime endDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool endDateSpecified, SendRecvType opType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool opTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, InvoiceDateType dateBy, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dateBySpecified) {
            object[] results = this.Invoke("getInvoiceList", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        opType,
                        opTypeSpecified,
                        sessionID,
                        dateBy,
                        dateBySpecified});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getInvoiceListAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, SendRecvType opType, bool opTypeSpecified, string sessionID, InvoiceDateType dateBy, bool dateBySpecified) {
            this.getInvoiceListAsync(beginDate, beginDateSpecified, endDate, endDateSpecified, opType, opTypeSpecified, sessionID, dateBy, dateBySpecified, null);
        }
        
        /// <remarks/>
        public void getInvoiceListAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, SendRecvType opType, bool opTypeSpecified, string sessionID, InvoiceDateType dateBy, bool dateBySpecified, object userState) {
            if ((this.getInvoiceListOperationCompleted == null)) {
                this.getInvoiceListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvoiceListOperationCompleted);
            }
            this.InvokeAsync("getInvoiceList", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        opType,
                        opTypeSpecified,
                        sessionID,
                        dateBy,
                        dateBySpecified}, this.getInvoiceListOperationCompleted, userState);
        }
        
        private void OngetInvoiceListOperationCompleted(object arg) {
            if ((this.getInvoiceListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvoiceListCompleted(this, new getInvoiceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getInvoice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string invoiceID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID) {
            object[] results = this.Invoke("getInvoice", new object[] {
                        invoiceID,
                        sessionID});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getInvoiceAsync(string invoiceID, string sessionID) {
            this.getInvoiceAsync(invoiceID, sessionID, null);
        }
        
        /// <remarks/>
        public void getInvoiceAsync(string invoiceID, string sessionID, object userState) {
            if ((this.getInvoiceOperationCompleted == null)) {
                this.getInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvoiceOperationCompleted);
            }
            this.InvokeAsync("getInvoice", new object[] {
                        invoiceID,
                        sessionID}, this.getInvoiceOperationCompleted, userState);
        }
        
        private void OngetInvoiceOperationCompleted(object arg) {
            if ((this.getInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvoiceCompleted(this, new getInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getUserList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getUserList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] LoginType login, UserListType listType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool listTypeSpecified) {
            object[] results = this.Invoke("getUserList", new object[] {
                        login,
                        listType,
                        listTypeSpecified});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getUserListAsync(LoginType login, UserListType listType, bool listTypeSpecified) {
            this.getUserListAsync(login, listType, listTypeSpecified, null);
        }
        
        /// <remarks/>
        public void getUserListAsync(LoginType login, UserListType listType, bool listTypeSpecified, object userState) {
            if ((this.getUserListOperationCompleted == null)) {
                this.getUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserListOperationCompleted);
            }
            this.InvokeAsync("getUserList", new object[] {
                        login,
                        listType,
                        listTypeSpecified}, this.getUserListOperationCompleted, userState);
        }
        
        private void OngetUserListOperationCompleted(object arg) {
            if ((this.getUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserListCompleted(this, new getUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getUserListNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getUserListNew([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] LoginType login, UserListType listType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool listTypeSpecified) {
            object[] results = this.Invoke("getUserListNew", new object[] {
                        login,
                        listType,
                        listTypeSpecified});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getUserListNewAsync(LoginType login, UserListType listType, bool listTypeSpecified) {
            this.getUserListNewAsync(login, listType, listTypeSpecified, null);
        }
        
        /// <remarks/>
        public void getUserListNewAsync(LoginType login, UserListType listType, bool listTypeSpecified, object userState) {
            if ((this.getUserListNewOperationCompleted == null)) {
                this.getUserListNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserListNewOperationCompleted);
            }
            this.InvokeAsync("getUserListNew", new object[] {
                        login,
                        listType,
                        listTypeSpecified}, this.getUserListNewOperationCompleted, userState);
        }
        
        private void OngetUserListNewOperationCompleted(object arg) {
            if ((this.getUserListNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserListNewCompleted(this, new getUserListNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getApprovalFlowList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getApprovalFlowList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getApprovalFlowListResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getApprovalFlowListResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("getApprovalFlowList", new object[] {
                        sessionID});
            getApprovalFlowListResult = ((bool)(results[0]));
            getApprovalFlowListResultSpecified = ((bool)(results[1]));
            document = ((DocumentType)(results[2]));
        }
        
        /// <remarks/>
        public void getApprovalFlowListAsync(string sessionID) {
            this.getApprovalFlowListAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getApprovalFlowListAsync(string sessionID, object userState) {
            if ((this.getApprovalFlowListOperationCompleted == null)) {
                this.getApprovalFlowListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetApprovalFlowListOperationCompleted);
            }
            this.InvokeAsync("getApprovalFlowList", new object[] {
                        sessionID}, this.getApprovalFlowListOperationCompleted, userState);
        }
        
        private void OngetApprovalFlowListOperationCompleted(object arg) {
            if ((this.getApprovalFlowListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getApprovalFlowListCompleted(this, new getApprovalFlowListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/setApprovalFlowId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setApprovalFlowId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string invoiceUuid, int flowId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool flowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool setApprovalFlowIdResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool setApprovalFlowIdResultSpecified) {
            object[] results = this.Invoke("setApprovalFlowId", new object[] {
                        invoiceUuid,
                        flowId,
                        flowIdSpecified,
                        sessionID});
            setApprovalFlowIdResult = ((bool)(results[0]));
            setApprovalFlowIdResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void setApprovalFlowIdAsync(string invoiceUuid, int flowId, bool flowIdSpecified, string sessionID) {
            this.setApprovalFlowIdAsync(invoiceUuid, flowId, flowIdSpecified, sessionID, null);
        }
        
        /// <remarks/>
        public void setApprovalFlowIdAsync(string invoiceUuid, int flowId, bool flowIdSpecified, string sessionID, object userState) {
            if ((this.setApprovalFlowIdOperationCompleted == null)) {
                this.setApprovalFlowIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetApprovalFlowIdOperationCompleted);
            }
            this.InvokeAsync("setApprovalFlowId", new object[] {
                        invoiceUuid,
                        flowId,
                        flowIdSpecified,
                        sessionID}, this.setApprovalFlowIdOperationCompleted, userState);
        }
        
        private void OnsetApprovalFlowIdOperationCompleted(object arg) {
            if ((this.setApprovalFlowIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setApprovalFlowIdCompleted(this, new setApprovalFlowIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getApprovalFlowRes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getApprovalFlowRes([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string invoiceUuid, int flowId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool flowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getApprovalFlowResResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getApprovalFlowResResultSpecified, out int flowRes, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool flowResSpecified, out int flowAction, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool flowActionSpecified) {
            object[] results = this.Invoke("getApprovalFlowRes", new object[] {
                        invoiceUuid,
                        flowId,
                        flowIdSpecified,
                        sessionID});
            getApprovalFlowResResult = ((bool)(results[0]));
            getApprovalFlowResResultSpecified = ((bool)(results[1]));
            flowRes = ((int)(results[2]));
            flowResSpecified = ((bool)(results[3]));
            flowAction = ((int)(results[4]));
            flowActionSpecified = ((bool)(results[5]));
        }
        
        /// <remarks/>
        public void getApprovalFlowResAsync(string invoiceUuid, int flowId, bool flowIdSpecified, string sessionID) {
            this.getApprovalFlowResAsync(invoiceUuid, flowId, flowIdSpecified, sessionID, null);
        }
        
        /// <remarks/>
        public void getApprovalFlowResAsync(string invoiceUuid, int flowId, bool flowIdSpecified, string sessionID, object userState) {
            if ((this.getApprovalFlowResOperationCompleted == null)) {
                this.getApprovalFlowResOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetApprovalFlowResOperationCompleted);
            }
            this.InvokeAsync("getApprovalFlowRes", new object[] {
                        invoiceUuid,
                        flowId,
                        flowIdSpecified,
                        sessionID}, this.getApprovalFlowResOperationCompleted, userState);
        }
        
        private void OngetApprovalFlowResOperationCompleted(object arg) {
            if ((this.getApprovalFlowResCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getApprovalFlowResCompleted(this, new getApprovalFlowResCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getDocumentStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getDocumentStatus(int docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, long relRef, [System.Xml.Serialization.XmlIgnoreAttribute()] bool relRefSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out int respStatus, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool respStatusSpecified, out int responseCode, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool responseCodeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string responseDesc, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string envelopeId) {
            object[] results = this.Invoke("getDocumentStatus", new object[] {
                        docType,
                        docTypeSpecified,
                        uuid,
                        relRef,
                        relRefSpecified,
                        sessionID});
            respStatus = ((int)(results[0]));
            respStatusSpecified = ((bool)(results[1]));
            responseCode = ((int)(results[2]));
            responseCodeSpecified = ((bool)(results[3]));
            responseDesc = ((string)(results[4]));
            envelopeId = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void getDocumentStatusAsync(int docType, bool docTypeSpecified, string uuid, long relRef, bool relRefSpecified, string sessionID) {
            this.getDocumentStatusAsync(docType, docTypeSpecified, uuid, relRef, relRefSpecified, sessionID, null);
        }
        
        /// <remarks/>
        public void getDocumentStatusAsync(int docType, bool docTypeSpecified, string uuid, long relRef, bool relRefSpecified, string sessionID, object userState) {
            if ((this.getDocumentStatusOperationCompleted == null)) {
                this.getDocumentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentStatusOperationCompleted);
            }
            this.InvokeAsync("getDocumentStatus", new object[] {
                        docType,
                        docTypeSpecified,
                        uuid,
                        relRef,
                        relRefSpecified,
                        sessionID}, this.getDocumentStatusOperationCompleted, userState);
        }
        
        private void OngetDocumentStatusOperationCompleted(object arg) {
            if ((this.getDocumentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentStatusCompleted(this, new getDocumentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getDocumentStatusEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getDocumentStatusEx(int docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, long relRef, [System.Xml.Serialization.XmlIgnoreAttribute()] bool relRefSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out int respStatus, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool respStatusSpecified, out int responseCode, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool responseCodeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string responseDesc, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string envelopeId, out System.DateTime currentDate, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool currentDateSpecified) {
            object[] results = this.Invoke("getDocumentStatusEx", new object[] {
                        docType,
                        docTypeSpecified,
                        uuid,
                        relRef,
                        relRefSpecified,
                        sessionID});
            respStatus = ((int)(results[0]));
            respStatusSpecified = ((bool)(results[1]));
            responseCode = ((int)(results[2]));
            responseCodeSpecified = ((bool)(results[3]));
            responseDesc = ((string)(results[4]));
            envelopeId = ((string)(results[5]));
            currentDate = ((System.DateTime)(results[6]));
            currentDateSpecified = ((bool)(results[7]));
        }
        
        /// <remarks/>
        public void getDocumentStatusExAsync(int docType, bool docTypeSpecified, string uuid, long relRef, bool relRefSpecified, string sessionID) {
            this.getDocumentStatusExAsync(docType, docTypeSpecified, uuid, relRef, relRefSpecified, sessionID, null);
        }
        
        /// <remarks/>
        public void getDocumentStatusExAsync(int docType, bool docTypeSpecified, string uuid, long relRef, bool relRefSpecified, string sessionID, object userState) {
            if ((this.getDocumentStatusExOperationCompleted == null)) {
                this.getDocumentStatusExOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentStatusExOperationCompleted);
            }
            this.InvokeAsync("getDocumentStatusEx", new object[] {
                        docType,
                        docTypeSpecified,
                        uuid,
                        relRef,
                        relRefSpecified,
                        sessionID}, this.getDocumentStatusExOperationCompleted, userState);
        }
        
        private void OngetDocumentStatusExOperationCompleted(object arg) {
            if ((this.getDocumentStatusExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentStatusExCompleted(this, new getDocumentStatusExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getEArchiveXslt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getEArchiveXslt([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getEArchiveXsltResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getEArchiveXsltResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("getEArchiveXslt", new object[] {
                        sessionID});
            getEArchiveXsltResult = ((bool)(results[0]));
            getEArchiveXsltResultSpecified = ((bool)(results[1]));
            document = ((DocumentType)(results[2]));
        }
        
        /// <remarks/>
        public void getEArchiveXsltAsync(string sessionID) {
            this.getEArchiveXsltAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getEArchiveXsltAsync(string sessionID, object userState) {
            if ((this.getEArchiveXsltOperationCompleted == null)) {
                this.getEArchiveXsltOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEArchiveXsltOperationCompleted);
            }
            this.InvokeAsync("getEArchiveXslt", new object[] {
                        sessionID}, this.getEArchiveXsltOperationCompleted, userState);
        }
        
        private void OngetEArchiveXsltOperationCompleted(object arg) {
            if ((this.getEArchiveXsltCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEArchiveXsltCompleted(this, new getEArchiveXsltCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getInvoiceApplicationResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getInvoiceApplicationResponse([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, out int getInvoiceApplicationResponseResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getInvoiceApplicationResponseResultSpecified) {
            object[] results = this.Invoke("getInvoiceApplicationResponse", new object[] {
                        sessionID,
                        uuid});
            getInvoiceApplicationResponseResult = ((int)(results[0]));
            getInvoiceApplicationResponseResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void getInvoiceApplicationResponseAsync(string sessionID, string uuid) {
            this.getInvoiceApplicationResponseAsync(sessionID, uuid, null);
        }
        
        /// <remarks/>
        public void getInvoiceApplicationResponseAsync(string sessionID, string uuid, object userState) {
            if ((this.getInvoiceApplicationResponseOperationCompleted == null)) {
                this.getInvoiceApplicationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvoiceApplicationResponseOperationCompleted);
            }
            this.InvokeAsync("getInvoiceApplicationResponse", new object[] {
                        sessionID,
                        uuid}, this.getInvoiceApplicationResponseOperationCompleted, userState);
        }
        
        private void OngetInvoiceApplicationResponseOperationCompleted(object arg) {
            if ((this.getInvoiceApplicationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvoiceApplicationResponseCompleted(this, new getInvoiceApplicationResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getInvoiceResponseData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getInvoiceResponseData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string responseType, out bool getInvoiceResponseDataResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getInvoiceResponseDataResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("getInvoiceResponseData", new object[] {
                        sessionID,
                        uuid,
                        responseType});
            getInvoiceResponseDataResult = ((bool)(results[0]));
            getInvoiceResponseDataResultSpecified = ((bool)(results[1]));
            document = ((DocumentType)(results[2]));
        }
        
        /// <remarks/>
        public void getInvoiceResponseDataAsync(string sessionID, string uuid, string responseType) {
            this.getInvoiceResponseDataAsync(sessionID, uuid, responseType, null);
        }
        
        /// <remarks/>
        public void getInvoiceResponseDataAsync(string sessionID, string uuid, string responseType, object userState) {
            if ((this.getInvoiceResponseDataOperationCompleted == null)) {
                this.getInvoiceResponseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvoiceResponseDataOperationCompleted);
            }
            this.InvokeAsync("getInvoiceResponseData", new object[] {
                        sessionID,
                        uuid,
                        responseType}, this.getInvoiceResponseDataOperationCompleted, userState);
        }
        
        private void OngetInvoiceResponseDataOperationCompleted(object arg) {
            if ((this.getInvoiceResponseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvoiceResponseDataCompleted(this, new getInvoiceResponseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/setApplicationResponseOption", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setApplicationResponseOption([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, int option, [System.Xml.Serialization.XmlIgnoreAttribute()] bool optionSpecified, out bool setApplicationResponseOptionResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool setApplicationResponseOptionResultSpecified) {
            object[] results = this.Invoke("setApplicationResponseOption", new object[] {
                        sessionID,
                        option,
                        optionSpecified});
            setApplicationResponseOptionResult = ((bool)(results[0]));
            setApplicationResponseOptionResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void setApplicationResponseOptionAsync(string sessionID, int option, bool optionSpecified) {
            this.setApplicationResponseOptionAsync(sessionID, option, optionSpecified, null);
        }
        
        /// <remarks/>
        public void setApplicationResponseOptionAsync(string sessionID, int option, bool optionSpecified, object userState) {
            if ((this.setApplicationResponseOptionOperationCompleted == null)) {
                this.setApplicationResponseOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetApplicationResponseOptionOperationCompleted);
            }
            this.InvokeAsync("setApplicationResponseOption", new object[] {
                        sessionID,
                        option,
                        optionSpecified}, this.setApplicationResponseOptionOperationCompleted, userState);
        }
        
        private void OnsetApplicationResponseOptionOperationCompleted(object arg) {
            if ((this.setApplicationResponseOptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setApplicationResponseOptionCompleted(this, new setApplicationResponseOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getEArchiveInvoicePdfData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getEArchiveInvoicePdfData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, bool allInvoicesOrJustSigned, [System.Xml.Serialization.XmlIgnoreAttribute()] bool allInvoicesOrJustSignedSpecified, bool isCanceled, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isCanceledSpecified, out bool getEArchiveInvoicePdfDataResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getEArchiveInvoicePdfDataResultSpecified, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] out byte[] pdfData) {
            object[] results = this.Invoke("getEArchiveInvoicePdfData", new object[] {
                        sessionID,
                        uuid,
                        allInvoicesOrJustSigned,
                        allInvoicesOrJustSignedSpecified,
                        isCanceled,
                        isCanceledSpecified});
            getEArchiveInvoicePdfDataResult = ((bool)(results[0]));
            getEArchiveInvoicePdfDataResultSpecified = ((bool)(results[1]));
            pdfData = ((byte[])(results[2]));
        }
        
        /// <remarks/>
        public void getEArchiveInvoicePdfDataAsync(string sessionID, string uuid, bool allInvoicesOrJustSigned, bool allInvoicesOrJustSignedSpecified, bool isCanceled, bool isCanceledSpecified) {
            this.getEArchiveInvoicePdfDataAsync(sessionID, uuid, allInvoicesOrJustSigned, allInvoicesOrJustSignedSpecified, isCanceled, isCanceledSpecified, null);
        }
        
        /// <remarks/>
        public void getEArchiveInvoicePdfDataAsync(string sessionID, string uuid, bool allInvoicesOrJustSigned, bool allInvoicesOrJustSignedSpecified, bool isCanceled, bool isCanceledSpecified, object userState) {
            if ((this.getEArchiveInvoicePdfDataOperationCompleted == null)) {
                this.getEArchiveInvoicePdfDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEArchiveInvoicePdfDataOperationCompleted);
            }
            this.InvokeAsync("getEArchiveInvoicePdfData", new object[] {
                        sessionID,
                        uuid,
                        allInvoicesOrJustSigned,
                        allInvoicesOrJustSignedSpecified,
                        isCanceled,
                        isCanceledSpecified}, this.getEArchiveInvoicePdfDataOperationCompleted, userState);
        }
        
        private void OngetEArchiveInvoicePdfDataOperationCompleted(object arg) {
            if ((this.getEArchiveInvoicePdfDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEArchiveInvoicePdfDataCompleted(this, new getEArchiveInvoicePdfDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getDocumentData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getDocumentData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, GetDocumentType docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified, DocumentDataType dataType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dataTypeSpecified) {
            object[] results = this.Invoke("getDocumentData", new object[] {
                        sessionID,
                        uuid,
                        docType,
                        docTypeSpecified,
                        dataType,
                        dataTypeSpecified});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentDataAsync(string sessionID, string uuid, GetDocumentType docType, bool docTypeSpecified, DocumentDataType dataType, bool dataTypeSpecified) {
            this.getDocumentDataAsync(sessionID, uuid, docType, docTypeSpecified, dataType, dataTypeSpecified, null);
        }
        
        /// <remarks/>
        public void getDocumentDataAsync(string sessionID, string uuid, GetDocumentType docType, bool docTypeSpecified, DocumentDataType dataType, bool dataTypeSpecified, object userState) {
            if ((this.getDocumentDataOperationCompleted == null)) {
                this.getDocumentDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentDataOperationCompleted);
            }
            this.InvokeAsync("getDocumentData", new object[] {
                        sessionID,
                        uuid,
                        docType,
                        docTypeSpecified,
                        dataType,
                        dataTypeSpecified}, this.getDocumentDataOperationCompleted, userState);
        }
        
        private void OngetDocumentDataOperationCompleted(object arg) {
            if ((this.getDocumentDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentDataCompleted(this, new getDocumentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getReconciliationList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getReconciliationList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, System.DateTime begDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool begDateSpecified, System.DateTime endDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool endDateSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string begNum, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string endNum, SendRecvType opType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool opTypeSpecified, int docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified) {
            object[] results = this.Invoke("getReconciliationList", new object[] {
                        sessionID,
                        begDate,
                        begDateSpecified,
                        endDate,
                        endDateSpecified,
                        begNum,
                        endNum,
                        opType,
                        opTypeSpecified,
                        docType,
                        docTypeSpecified});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getReconciliationListAsync(string sessionID, System.DateTime begDate, bool begDateSpecified, System.DateTime endDate, bool endDateSpecified, string begNum, string endNum, SendRecvType opType, bool opTypeSpecified, int docType, bool docTypeSpecified) {
            this.getReconciliationListAsync(sessionID, begDate, begDateSpecified, endDate, endDateSpecified, begNum, endNum, opType, opTypeSpecified, docType, docTypeSpecified, null);
        }
        
        /// <remarks/>
        public void getReconciliationListAsync(string sessionID, System.DateTime begDate, bool begDateSpecified, System.DateTime endDate, bool endDateSpecified, string begNum, string endNum, SendRecvType opType, bool opTypeSpecified, int docType, bool docTypeSpecified, object userState) {
            if ((this.getReconciliationListOperationCompleted == null)) {
                this.getReconciliationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetReconciliationListOperationCompleted);
            }
            this.InvokeAsync("getReconciliationList", new object[] {
                        sessionID,
                        begDate,
                        begDateSpecified,
                        endDate,
                        endDateSpecified,
                        begNum,
                        endNum,
                        opType,
                        opTypeSpecified,
                        docType,
                        docTypeSpecified}, this.getReconciliationListOperationCompleted, userState);
        }
        
        private void OngetReconciliationListOperationCompleted(object arg) {
            if ((this.getReconciliationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getReconciliationListCompleted(this, new getReconciliationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendReconciliationReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendReconciliationReport([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType report, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out int sendReconciliationReportResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendReconciliationReportResultSpecified) {
            object[] results = this.Invoke("sendReconciliationReport", new object[] {
                        report,
                        sessionID});
            sendReconciliationReportResult = ((int)(results[0]));
            sendReconciliationReportResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendReconciliationReportAsync(DocumentType report, string sessionID) {
            this.sendReconciliationReportAsync(report, sessionID, null);
        }
        
        /// <remarks/>
        public void sendReconciliationReportAsync(DocumentType report, string sessionID, object userState) {
            if ((this.sendReconciliationReportOperationCompleted == null)) {
                this.sendReconciliationReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendReconciliationReportOperationCompleted);
            }
            this.InvokeAsync("sendReconciliationReport", new object[] {
                        report,
                        sessionID}, this.sendReconciliationReportOperationCompleted, userState);
        }
        
        private void OnsendReconciliationReportOperationCompleted(object arg) {
            if ((this.sendReconciliationReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendReconciliationReportCompleted(this, new sendReconciliationReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/createElementId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string createElementId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string year, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string invoicePrefix, GetDocumentType docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified) {
            object[] results = this.Invoke("createElementId", new object[] {
                        sessionID,
                        year,
                        invoicePrefix,
                        docType,
                        docTypeSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createElementIdAsync(string sessionID, string year, string invoicePrefix, GetDocumentType docType, bool docTypeSpecified) {
            this.createElementIdAsync(sessionID, year, invoicePrefix, docType, docTypeSpecified, null);
        }
        
        /// <remarks/>
        public void createElementIdAsync(string sessionID, string year, string invoicePrefix, GetDocumentType docType, bool docTypeSpecified, object userState) {
            if ((this.createElementIdOperationCompleted == null)) {
                this.createElementIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateElementIdOperationCompleted);
            }
            this.InvokeAsync("createElementId", new object[] {
                        sessionID,
                        year,
                        invoicePrefix,
                        docType,
                        docTypeSpecified}, this.createElementIdOperationCompleted, userState);
        }
        
        private void OncreateElementIdOperationCompleted(object arg) {
            if ((this.createElementIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createElementIdCompleted(this, new createElementIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/cancelEArchiveInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void cancelEArchiveInvoice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementId, out long cancelEArchiveInvoiceResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool cancelEArchiveInvoiceResultSpecified) {
            object[] results = this.Invoke("cancelEArchiveInvoice", new object[] {
                        sessionID,
                        uuid,
                        elementId});
            cancelEArchiveInvoiceResult = ((long)(results[0]));
            cancelEArchiveInvoiceResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void cancelEArchiveInvoiceAsync(string sessionID, string uuid, string elementId) {
            this.cancelEArchiveInvoiceAsync(sessionID, uuid, elementId, null);
        }
        
        /// <remarks/>
        public void cancelEArchiveInvoiceAsync(string sessionID, string uuid, string elementId, object userState) {
            if ((this.cancelEArchiveInvoiceOperationCompleted == null)) {
                this.cancelEArchiveInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelEArchiveInvoiceOperationCompleted);
            }
            this.InvokeAsync("cancelEArchiveInvoice", new object[] {
                        sessionID,
                        uuid,
                        elementId}, this.cancelEArchiveInvoiceOperationCompleted, userState);
        }
        
        private void OncancelEArchiveInvoiceOperationCompleted(object arg) {
            if ((this.cancelEArchiveInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelEArchiveInvoiceCompleted(this, new cancelEArchiveInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/SendEArchiveListForReconcilition", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendEArchiveListForReconcilition(System.DateTime beginDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool beginDateSpecified, System.DateTime endDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool endDateSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib")] ReconInvoiceType[] invoiceList, InvoiceType invoiceType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool invoiceTypeSpecified, out int SendEArchiveListForReconcilitionResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SendEArchiveListForReconcilitionResultSpecified) {
            object[] results = this.Invoke("SendEArchiveListForReconcilition", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        sessionID,
                        invoiceList,
                        invoiceType,
                        invoiceTypeSpecified});
            SendEArchiveListForReconcilitionResult = ((int)(results[0]));
            SendEArchiveListForReconcilitionResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SendEArchiveListForReconcilitionAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, string sessionID, ReconInvoiceType[] invoiceList, InvoiceType invoiceType, bool invoiceTypeSpecified) {
            this.SendEArchiveListForReconcilitionAsync(beginDate, beginDateSpecified, endDate, endDateSpecified, sessionID, invoiceList, invoiceType, invoiceTypeSpecified, null);
        }
        
        /// <remarks/>
        public void SendEArchiveListForReconcilitionAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, string sessionID, ReconInvoiceType[] invoiceList, InvoiceType invoiceType, bool invoiceTypeSpecified, object userState) {
            if ((this.SendEArchiveListForReconcilitionOperationCompleted == null)) {
                this.SendEArchiveListForReconcilitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEArchiveListForReconcilitionOperationCompleted);
            }
            this.InvokeAsync("SendEArchiveListForReconcilition", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        sessionID,
                        invoiceList,
                        invoiceType,
                        invoiceTypeSpecified}, this.SendEArchiveListForReconcilitionOperationCompleted, userState);
        }
        
        private void OnSendEArchiveListForReconcilitionOperationCompleted(object arg) {
            if ((this.SendEArchiveListForReconcilitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEArchiveListForReconcilitionCompleted(this, new SendEArchiveListForReconcilitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/SendDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType SendDocument([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType document, out long refId, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool refIdSpecified) {
            object[] results = this.Invoke("SendDocument", new object[] {
                        sessionID,
                        paramList,
                        document});
            refId = ((long)(results[1]));
            refIdSpecified = ((bool)(results[2]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void SendDocumentAsync(string sessionID, string[] paramList, DocumentType document) {
            this.SendDocumentAsync(sessionID, paramList, document, null);
        }
        
        /// <remarks/>
        public void SendDocumentAsync(string sessionID, string[] paramList, DocumentType document, object userState) {
            if ((this.SendDocumentOperationCompleted == null)) {
                this.SendDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendDocumentOperationCompleted);
            }
            this.InvokeAsync("SendDocument", new object[] {
                        sessionID,
                        paramList,
                        document}, this.SendDocumentOperationCompleted, userState);
        }
        
        private void OnSendDocumentOperationCompleted(object arg) {
            if ((this.SendDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendDocumentCompleted(this, new SendDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocument([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out ElementType document) {
            object[] results = this.Invoke("GetDocument", new object[] {
                        sessionID,
                        paramList});
            document = ((ElementType)(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentAsync(string sessionID, string[] paramList) {
            this.GetDocumentAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetDocumentOperationCompleted == null)) {
                this.GetDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentOperationCompleted);
            }
            this.InvokeAsync("GetDocument", new object[] {
                        sessionID,
                        paramList}, this.GetDocumentOperationCompleted, userState);
        }
        
        private void OnGetDocumentOperationCompleted(object arg) {
            if ((this.GetDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentCompleted(this, new GetDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentDone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentDone([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList) {
            object[] results = this.Invoke("GetDocumentDone", new object[] {
                        sessionID,
                        uuid,
                        paramList});
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentDoneAsync(string sessionID, string uuid, string[] paramList) {
            this.GetDocumentDoneAsync(sessionID, uuid, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentDoneAsync(string sessionID, string uuid, string[] paramList, object userState) {
            if ((this.GetDocumentDoneOperationCompleted == null)) {
                this.GetDocumentDoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentDoneOperationCompleted);
            }
            this.InvokeAsync("GetDocumentDone", new object[] {
                        sessionID,
                        uuid,
                        paramList}, this.GetDocumentDoneOperationCompleted, userState);
        }
        
        private void OnGetDocumentDoneOperationCompleted(object arg) {
            if ((this.GetDocumentDoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentDoneCompleted(this, new GetDocumentDoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentStatusType statusInfo) {
            object[] results = this.Invoke("GetDocumentStatus", new object[] {
                        sessionID,
                        uuid,
                        paramList});
            statusInfo = ((DocumentStatusType)(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentStatusAsync(string sessionID, string uuid, string[] paramList) {
            this.GetDocumentStatusAsync(sessionID, uuid, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentStatusAsync(string sessionID, string uuid, string[] paramList, object userState) {
            if ((this.GetDocumentStatusOperationCompleted == null)) {
                this.GetDocumentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentStatusOperationCompleted);
            }
            this.InvokeAsync("GetDocumentStatus", new object[] {
                        sessionID,
                        uuid,
                        paramList}, this.GetDocumentStatusOperationCompleted, userState);
        }
        
        private void OnGetDocumentStatusOperationCompleted(object arg) {
            if ((this.GetDocumentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentStatusCompleted(this, new GetDocumentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentStatusBatch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentStatusBatch([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] uuidList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")] out DocumentStatusBatchType[] statusInfoList) {
            object[] results = this.Invoke("GetDocumentStatusBatch", new object[] {
                        sessionID,
                        uuidList,
                        paramList});
            statusInfoList = ((DocumentStatusBatchType[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentStatusBatchAsync(string sessionID, string[] uuidList, string[] paramList) {
            this.GetDocumentStatusBatchAsync(sessionID, uuidList, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentStatusBatchAsync(string sessionID, string[] uuidList, string[] paramList, object userState) {
            if ((this.GetDocumentStatusBatchOperationCompleted == null)) {
                this.GetDocumentStatusBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentStatusBatchOperationCompleted);
            }
            this.InvokeAsync("GetDocumentStatusBatch", new object[] {
                        sessionID,
                        uuidList,
                        paramList}, this.GetDocumentStatusBatchOperationCompleted, userState);
        }
        
        private void OnGetDocumentStatusBatchOperationCompleted(object arg) {
            if ((this.GetDocumentStatusBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentStatusBatchCompleted(this, new GetDocumentStatusBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("GetDocumentData", new object[] {
                        sessionID,
                        uuid,
                        paramList});
            document = ((DocumentType)(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentDataAsync(string sessionID, string uuid, string[] paramList) {
            this.GetDocumentDataAsync(sessionID, uuid, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentDataAsync(string sessionID, string uuid, string[] paramList, object userState) {
            if ((this.GetDocumentDataOperationCompleted == null)) {
                this.GetDocumentDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentDataOperationCompleted);
            }
            this.InvokeAsync("GetDocumentData", new object[] {
                        sessionID,
                        uuid,
                        paramList}, this.GetDocumentDataOperationCompleted, userState);
        }
        
        private void OnGetDocumentDataOperationCompleted(object arg) {
            if ((this.GetDocumentDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentDataCompleted(this, new GetDocumentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")] out Document[] docList) {
            object[] results = this.Invoke("GetDocumentList", new object[] {
                        sessionID,
                        paramList});
            docList = ((Document[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListAsync(string sessionID, string[] paramList) {
            this.GetDocumentListAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentListAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetDocumentListOperationCompleted == null)) {
                this.GetDocumentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListOperationCompleted);
            }
            this.InvokeAsync("GetDocumentList", new object[] {
                        sessionID,
                        paramList}, this.GetDocumentListOperationCompleted, userState);
        }
        
        private void OnGetDocumentListOperationCompleted(object arg) {
            if ((this.GetDocumentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListCompleted(this, new GetDocumentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetReportList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetReportList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")] out Report[] reportList) {
            object[] results = this.Invoke("GetReportList", new object[] {
                        sessionID,
                        paramList});
            reportList = ((Report[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportListAsync(string sessionID, string[] paramList) {
            this.GetReportListAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetReportListAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetReportListOperationCompleted == null)) {
                this.GetReportListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportListOperationCompleted);
            }
            this.InvokeAsync("GetReportList", new object[] {
                        sessionID,
                        paramList}, this.GetReportListOperationCompleted, userState);
        }
        
        private void OnGetReportListOperationCompleted(object arg) {
            if ((this.GetReportListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportListCompleted(this, new GetReportListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetValidateGIBUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetValidateGIBUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList) {
            object[] results = this.Invoke("GetValidateGIBUser", new object[] {
                        sessionID,
                        paramList});
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetValidateGIBUserAsync(string sessionID, string[] paramList) {
            this.GetValidateGIBUserAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetValidateGIBUserAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetValidateGIBUserOperationCompleted == null)) {
                this.GetValidateGIBUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetValidateGIBUserOperationCompleted);
            }
            this.InvokeAsync("GetValidateGIBUser", new object[] {
                        sessionID,
                        paramList}, this.GetValidateGIBUserOperationCompleted, userState);
        }
        
        private void OnGetValidateGIBUserOperationCompleted(object arg) {
            if ((this.GetValidateGIBUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetValidateGIBUserCompleted(this, new GetValidateGIBUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/CheckGibUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType CheckGibUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] vknTcknList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")] out GibUserType[] userList) {
            object[] results = this.Invoke("CheckGibUser", new object[] {
                        sessionID,
                        vknTcknList});
            userList = ((GibUserType[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void CheckGibUserAsync(string sessionID, string[] vknTcknList) {
            this.CheckGibUserAsync(sessionID, vknTcknList, null);
        }
        
        /// <remarks/>
        public void CheckGibUserAsync(string sessionID, string[] vknTcknList, object userState) {
            if ((this.CheckGibUserOperationCompleted == null)) {
                this.CheckGibUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckGibUserOperationCompleted);
            }
            this.InvokeAsync("CheckGibUser", new object[] {
                        sessionID,
                        vknTcknList}, this.CheckGibUserOperationCompleted, userState);
        }
        
        private void OnCheckGibUserOperationCompleted(object arg) {
            if ((this.CheckGibUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckGibUserCompleted(this, new CheckGibUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetMailStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetMailStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")] out MailStatusResult[] emailResult) {
            object[] results = this.Invoke("GetMailStatus", new object[] {
                        sessionID,
                        paramList});
            emailResult = ((MailStatusResult[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetMailStatusAsync(string sessionID, string[] paramList) {
            this.GetMailStatusAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetMailStatusAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetMailStatusOperationCompleted == null)) {
                this.GetMailStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailStatusOperationCompleted);
            }
            this.InvokeAsync("GetMailStatus", new object[] {
                        sessionID,
                        paramList}, this.GetMailStatusOperationCompleted, userState);
        }
        
        private void OnGetMailStatusOperationCompleted(object arg) {
            if ((this.GetMailStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMailStatusCompleted(this, new GetMailStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/Get2FACode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType Get2FACode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string phone) {
            object[] results = this.Invoke("Get2FACode", new object[] {
                        sessionID,
                        phone});
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void Get2FACodeAsync(string sessionID, string phone) {
            this.Get2FACodeAsync(sessionID, phone, null);
        }
        
        /// <remarks/>
        public void Get2FACodeAsync(string sessionID, string phone, object userState) {
            if ((this.Get2FACodeOperationCompleted == null)) {
                this.Get2FACodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet2FACodeOperationCompleted);
            }
            this.InvokeAsync("Get2FACode", new object[] {
                        sessionID,
                        phone}, this.Get2FACodeOperationCompleted, userState);
        }
        
        private void OnGet2FACodeOperationCompleted(object arg) {
            if ((this.Get2FACodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get2FACodeCompleted(this, new Get2FACodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/Get5K30KCancelObjectionStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType Get5K30KCancelObjectionStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid) {
            object[] results = this.Invoke("Get5K30KCancelObjectionStatus", new object[] {
                        sessionID,
                        uuid});
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void Get5K30KCancelObjectionStatusAsync(string sessionID, string uuid) {
            this.Get5K30KCancelObjectionStatusAsync(sessionID, uuid, null);
        }
        
        /// <remarks/>
        public void Get5K30KCancelObjectionStatusAsync(string sessionID, string uuid, object userState) {
            if ((this.Get5K30KCancelObjectionStatusOperationCompleted == null)) {
                this.Get5K30KCancelObjectionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet5K30KCancelObjectionStatusOperationCompleted);
            }
            this.InvokeAsync("Get5K30KCancelObjectionStatus", new object[] {
                        sessionID,
                        uuid}, this.Get5K30KCancelObjectionStatusOperationCompleted, userState);
        }
        
        private void OnGet5K30KCancelObjectionStatusOperationCompleted(object arg) {
            if ((this.Get5K30KCancelObjectionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get5K30KCancelObjectionStatusCompleted(this, new Get5K30KCancelObjectionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetUserAccountServicesByVknTckn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetUserAccountServicesByVknTckn([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string vknTckn, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService.Model")] out UserAccountServiceList[] resultList) {
            object[] results = this.Invoke("GetUserAccountServicesByVknTckn", new object[] {
                        sessionID,
                        vknTckn});
            resultList = ((UserAccountServiceList[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAccountServicesByVknTcknAsync(string sessionID, string vknTckn) {
            this.GetUserAccountServicesByVknTcknAsync(sessionID, vknTckn, null);
        }
        
        /// <remarks/>
        public void GetUserAccountServicesByVknTcknAsync(string sessionID, string vknTckn, object userState) {
            if ((this.GetUserAccountServicesByVknTcknOperationCompleted == null)) {
                this.GetUserAccountServicesByVknTcknOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserAccountServicesByVknTcknOperationCompleted);
            }
            this.InvokeAsync("GetUserAccountServicesByVknTckn", new object[] {
                        sessionID,
                        vknTckn}, this.GetUserAccountServicesByVknTcknOperationCompleted, userState);
        }
        
        private void OnGetUserAccountServicesByVknTcknOperationCompleted(object arg) {
            if ((this.GetUserAccountServicesByVknTcknCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserAccountServicesByVknTcknCompleted(this, new GetUserAccountServicesByVknTcknCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/MarkAsUnreceived", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType MarkAsUnreceived([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList) {
            object[] results = this.Invoke("MarkAsUnreceived", new object[] {
                        sessionID,
                        uuid,
                        paramList});
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void MarkAsUnreceivedAsync(string sessionID, string uuid, string[] paramList) {
            this.MarkAsUnreceivedAsync(sessionID, uuid, paramList, null);
        }
        
        /// <remarks/>
        public void MarkAsUnreceivedAsync(string sessionID, string uuid, string[] paramList, object userState) {
            if ((this.MarkAsUnreceivedOperationCompleted == null)) {
                this.MarkAsUnreceivedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkAsUnreceivedOperationCompleted);
            }
            this.InvokeAsync("MarkAsUnreceived", new object[] {
                        sessionID,
                        uuid,
                        paramList}, this.MarkAsUnreceivedOperationCompleted, userState);
        }
        
        private void OnMarkAsUnreceivedOperationCompleted(object arg) {
            if ((this.MarkAsUnreceivedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkAsUnreceivedCompleted(this, new MarkAsUnreceivedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentListWithDepartment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentListWithDepartment([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")] out Document[] docList) {
            object[] results = this.Invoke("GetDocumentListWithDepartment", new object[] {
                        sessionID,
                        paramList});
            docList = ((Document[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListWithDepartmentAsync(string sessionID, string[] paramList) {
            this.GetDocumentListWithDepartmentAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentListWithDepartmentAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetDocumentListWithDepartmentOperationCompleted == null)) {
                this.GetDocumentListWithDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListWithDepartmentOperationCompleted);
            }
            this.InvokeAsync("GetDocumentListWithDepartment", new object[] {
                        sessionID,
                        paramList}, this.GetDocumentListWithDepartmentOperationCompleted, userState);
        }
        
        private void OnGetDocumentListWithDepartmentOperationCompleted(object arg) {
            if ((this.GetDocumentListWithDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListWithDepartmentCompleted(this, new GetDocumentListWithDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetPrefixLastNumberList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetPrefixLastNumberList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")] out PrefixLastNumber[] resultList) {
            object[] results = this.Invoke("GetPrefixLastNumberList", new object[] {
                        sessionID,
                        paramList});
            resultList = ((PrefixLastNumber[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrefixLastNumberListAsync(string sessionID, string[] paramList) {
            this.GetPrefixLastNumberListAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetPrefixLastNumberListAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetPrefixLastNumberListOperationCompleted == null)) {
                this.GetPrefixLastNumberListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrefixLastNumberListOperationCompleted);
            }
            this.InvokeAsync("GetPrefixLastNumberList", new object[] {
                        sessionID,
                        paramList}, this.GetPrefixLastNumberListOperationCompleted, userState);
        }
        
        private void OnGetPrefixLastNumberListOperationCompleted(object arg) {
            if ((this.GetPrefixLastNumberListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrefixLastNumberListCompleted(this, new GetPrefixLastNumberListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/ActivateVUK507Services", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType ActivateVUK507Services([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService.Model")] out ServiceActivationResult[] resultList) {
            object[] results = this.Invoke("ActivateVUK507Services", new object[] {
                        sessionID,
                        paramList});
            resultList = ((ServiceActivationResult[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateVUK507ServicesAsync(string sessionID, string[] paramList) {
            this.ActivateVUK507ServicesAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void ActivateVUK507ServicesAsync(string sessionID, string[] paramList, object userState) {
            if ((this.ActivateVUK507ServicesOperationCompleted == null)) {
                this.ActivateVUK507ServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateVUK507ServicesOperationCompleted);
            }
            this.InvokeAsync("ActivateVUK507Services", new object[] {
                        sessionID,
                        paramList}, this.ActivateVUK507ServicesOperationCompleted, userState);
        }
        
        private void OnActivateVUK507ServicesOperationCompleted(object arg) {
            if ((this.ActivateVUK507ServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateVUK507ServicesCompleted(this, new ActivateVUK507ServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetReceiverInfoFromTurmob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetReceiverInfoFromTurmob([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string vknTckn, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out TurmobResponseModel turmobResponse) {
            object[] results = this.Invoke("GetReceiverInfoFromTurmob", new object[] {
                        sessionID,
                        vknTckn,
                        token});
            turmobResponse = ((TurmobResponseModel)(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetReceiverInfoFromTurmobAsync(string sessionID, string vknTckn, string token) {
            this.GetReceiverInfoFromTurmobAsync(sessionID, vknTckn, token, null);
        }
        
        /// <remarks/>
        public void GetReceiverInfoFromTurmobAsync(string sessionID, string vknTckn, string token, object userState) {
            if ((this.GetReceiverInfoFromTurmobOperationCompleted == null)) {
                this.GetReceiverInfoFromTurmobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReceiverInfoFromTurmobOperationCompleted);
            }
            this.InvokeAsync("GetReceiverInfoFromTurmob", new object[] {
                        sessionID,
                        vknTckn,
                        token}, this.GetReceiverInfoFromTurmobOperationCompleted, userState);
        }
        
        private void OnGetReceiverInfoFromTurmobOperationCompleted(object arg) {
            if ((this.GetReceiverInfoFromTurmobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReceiverInfoFromTurmobCompleted(this, new GetReceiverInfoFromTurmobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PostBoxServiceEndpoint_http", Namespace="http://tempuri.org/")]
    public partial class PostBoxServiceEndpoint_http : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetVersionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiagnosisResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ALiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEnvelopeOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendApplicationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEnvelopeExOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendInvoiceExOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSignedInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendApplicationResponseExOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEArchiveDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveDoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveInvoiceDoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveApplicationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveApplicationResponseDoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback getApplicationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvoiceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAppRespStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEnvelopeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEnvelopeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvoiceListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserListNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback getApprovalFlowListOperationCompleted;
        
        private System.Threading.SendOrPostCallback setApprovalFlowIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getApprovalFlowResOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentStatusExOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEArchiveXsltOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvoiceApplicationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvoiceResponseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback setApplicationResponseOptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEArchiveInvoicePdfDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getReconciliationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendReconciliationReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback createElementIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelEArchiveInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEArchiveListForReconcilitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentDoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentStatusBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetValidateGIBUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckGibUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMailStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get2FACodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get5K30KCancelObjectionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserAccountServicesByVknTcknOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkAsUnreceivedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListWithDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrefixLastNumberListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateVUK507ServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReceiverInfoFromTurmobOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PostBoxServiceEndpoint_http() {
            this.Url = "http://pb.elogo.com.tr/PostBoxService.svc";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetVersionsCompletedEventHandler GetVersionsCompleted;
        
        /// <remarks/>
        public event GetDiagnosisResultCompletedEventHandler GetDiagnosisResultCompleted;
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event ALiveCompletedEventHandler ALiveCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event sendEnvelopeCompletedEventHandler sendEnvelopeCompleted;
        
        /// <remarks/>
        public event sendInvoiceCompletedEventHandler sendInvoiceCompleted;
        
        /// <remarks/>
        public event sendApplicationResponseCompletedEventHandler sendApplicationResponseCompleted;
        
        /// <remarks/>
        public event sendEnvelopeExCompletedEventHandler sendEnvelopeExCompleted;
        
        /// <remarks/>
        public event sendInvoiceExCompletedEventHandler sendInvoiceExCompleted;
        
        /// <remarks/>
        public event sendSignedInvoiceCompletedEventHandler sendSignedInvoiceCompleted;
        
        /// <remarks/>
        public event sendApplicationResponseExCompletedEventHandler sendApplicationResponseExCompleted;
        
        /// <remarks/>
        public event sendEArchiveDocumentCompletedEventHandler sendEArchiveDocumentCompleted;
        
        /// <remarks/>
        public event receiveDocumentCompletedEventHandler receiveDocumentCompleted;
        
        /// <remarks/>
        public event receiveDoneCompletedEventHandler receiveDoneCompleted;
        
        /// <remarks/>
        public event receiveInvoiceCompletedEventHandler receiveInvoiceCompleted;
        
        /// <remarks/>
        public event receiveInvoiceDoneCompletedEventHandler receiveInvoiceDoneCompleted;
        
        /// <remarks/>
        public event receiveApplicationResponseCompletedEventHandler receiveApplicationResponseCompleted;
        
        /// <remarks/>
        public event receiveApplicationResponseDoneCompletedEventHandler receiveApplicationResponseDoneCompleted;
        
        /// <remarks/>
        public event getApplicationResponseCompletedEventHandler getApplicationResponseCompleted;
        
        /// <remarks/>
        public event getInvoiceStatusCompletedEventHandler getInvoiceStatusCompleted;
        
        /// <remarks/>
        public event getAppRespStatusCompletedEventHandler getAppRespStatusCompleted;
        
        /// <remarks/>
        public event getEnvelopeListCompletedEventHandler getEnvelopeListCompleted;
        
        /// <remarks/>
        public event getEnvelopeCompletedEventHandler getEnvelopeCompleted;
        
        /// <remarks/>
        public event getInvoiceListCompletedEventHandler getInvoiceListCompleted;
        
        /// <remarks/>
        public event getInvoiceCompletedEventHandler getInvoiceCompleted;
        
        /// <remarks/>
        public event getUserListCompletedEventHandler getUserListCompleted;
        
        /// <remarks/>
        public event getUserListNewCompletedEventHandler getUserListNewCompleted;
        
        /// <remarks/>
        public event getApprovalFlowListCompletedEventHandler getApprovalFlowListCompleted;
        
        /// <remarks/>
        public event setApprovalFlowIdCompletedEventHandler setApprovalFlowIdCompleted;
        
        /// <remarks/>
        public event getApprovalFlowResCompletedEventHandler getApprovalFlowResCompleted;
        
        /// <remarks/>
        public event getDocumentStatusCompletedEventHandler getDocumentStatusCompleted;
        
        /// <remarks/>
        public event getDocumentStatusExCompletedEventHandler getDocumentStatusExCompleted;
        
        /// <remarks/>
        public event getEArchiveXsltCompletedEventHandler getEArchiveXsltCompleted;
        
        /// <remarks/>
        public event getInvoiceApplicationResponseCompletedEventHandler getInvoiceApplicationResponseCompleted;
        
        /// <remarks/>
        public event getInvoiceResponseDataCompletedEventHandler getInvoiceResponseDataCompleted;
        
        /// <remarks/>
        public event setApplicationResponseOptionCompletedEventHandler setApplicationResponseOptionCompleted;
        
        /// <remarks/>
        public event getEArchiveInvoicePdfDataCompletedEventHandler getEArchiveInvoicePdfDataCompleted;
        
        /// <remarks/>
        public event getDocumentDataCompletedEventHandler getDocumentDataCompleted;
        
        /// <remarks/>
        public event getReconciliationListCompletedEventHandler getReconciliationListCompleted;
        
        /// <remarks/>
        public event sendReconciliationReportCompletedEventHandler sendReconciliationReportCompleted;
        
        /// <remarks/>
        public event createElementIdCompletedEventHandler createElementIdCompleted;
        
        /// <remarks/>
        public event cancelEArchiveInvoiceCompletedEventHandler cancelEArchiveInvoiceCompleted;
        
        /// <remarks/>
        public event SendEArchiveListForReconcilitionCompletedEventHandler SendEArchiveListForReconcilitionCompleted;
        
        /// <remarks/>
        public event SendDocumentCompletedEventHandler SendDocumentCompleted;
        
        /// <remarks/>
        public event GetDocumentCompletedEventHandler GetDocumentCompleted;
        
        /// <remarks/>
        public event GetDocumentDoneCompletedEventHandler GetDocumentDoneCompleted;
        
        /// <remarks/>
        public event GetDocumentStatusCompletedEventHandler GetDocumentStatusCompleted;
        
        /// <remarks/>
        public event GetDocumentStatusBatchCompletedEventHandler GetDocumentStatusBatchCompleted;
        
        /// <remarks/>
        public event GetDocumentDataCompletedEventHandler GetDocumentDataCompleted;
        
        /// <remarks/>
        public event GetDocumentListCompletedEventHandler GetDocumentListCompleted;
        
        /// <remarks/>
        public event GetReportListCompletedEventHandler GetReportListCompleted;
        
        /// <remarks/>
        public event GetValidateGIBUserCompletedEventHandler GetValidateGIBUserCompleted;
        
        /// <remarks/>
        public event CheckGibUserCompletedEventHandler CheckGibUserCompleted;
        
        /// <remarks/>
        public event GetMailStatusCompletedEventHandler GetMailStatusCompleted;
        
        /// <remarks/>
        public event Get2FACodeCompletedEventHandler Get2FACodeCompleted;
        
        /// <remarks/>
        public event Get5K30KCancelObjectionStatusCompletedEventHandler Get5K30KCancelObjectionStatusCompleted;
        
        /// <remarks/>
        public event GetUserAccountServicesByVknTcknCompletedEventHandler GetUserAccountServicesByVknTcknCompleted;
        
        /// <remarks/>
        public event MarkAsUnreceivedCompletedEventHandler MarkAsUnreceivedCompleted;
        
        /// <remarks/>
        public event GetDocumentListWithDepartmentCompletedEventHandler GetDocumentListWithDepartmentCompleted;
        
        /// <remarks/>
        public event GetPrefixLastNumberListCompletedEventHandler GetPrefixLastNumberListCompleted;
        
        /// <remarks/>
        public event ActivateVUK507ServicesCompletedEventHandler ActivateVUK507ServicesCompleted;
        
        /// <remarks/>
        public event GetReceiverInfoFromTurmobCompletedEventHandler GetReceiverInfoFromTurmobCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICommonEndpoints/GetVersions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ServiceVersionResult GetVersions() {
            object[] results = this.Invoke("GetVersions", new object[0]);
            return ((ServiceVersionResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionsAsync() {
            this.GetVersionsAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionsAsync(object userState) {
            if ((this.GetVersionsOperationCompleted == null)) {
                this.GetVersionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionsOperationCompleted);
            }
            this.InvokeAsync("GetVersions", new object[0], this.GetVersionsOperationCompleted, userState);
        }
        
        private void OnGetVersionsOperationCompleted(object arg) {
            if ((this.GetVersionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionsCompleted(this, new GetVersionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICommonEndpoints/GetDiagnosisResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DiagnosticParameter GetDiagnosisResult() {
            object[] results = this.Invoke("GetDiagnosisResult", new object[0]);
            return ((DiagnosticParameter)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiagnosisResultAsync() {
            this.GetDiagnosisResultAsync(null);
        }
        
        /// <remarks/>
        public void GetDiagnosisResultAsync(object userState) {
            if ((this.GetDiagnosisResultOperationCompleted == null)) {
                this.GetDiagnosisResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiagnosisResultOperationCompleted);
            }
            this.InvokeAsync("GetDiagnosisResult", new object[0], this.GetDiagnosisResultOperationCompleted, userState);
        }
        
        private void OnGetDiagnosisResultOperationCompleted(object arg) {
            if ((this.GetDiagnosisResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiagnosisResultCompleted(this, new GetDiagnosisResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/Ping", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        /// <remarks/>
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/ALive", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ALive([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string key) {
            object[] results = this.Invoke("ALive", new object[] {
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ALiveAsync(string key) {
            this.ALiveAsync(key, null);
        }
        
        /// <remarks/>
        public void ALiveAsync(string key, object userState) {
            if ((this.ALiveOperationCompleted == null)) {
                this.ALiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnALiveOperationCompleted);
            }
            this.InvokeAsync("ALive", new object[] {
                        key}, this.ALiveOperationCompleted, userState);
        }
        
        private void OnALiveOperationCompleted(object arg) {
            if ((this.ALiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ALiveCompleted(this, new ALiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Login([System.Xml.Serialization.XmlElementAttribute("login", IsNullable=true)] LoginType login1, out bool LoginResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool LoginResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string sessionID) {
            object[] results = this.Invoke("Login", new object[] {
                        login1});
            LoginResult = ((bool)(results[0]));
            LoginResultSpecified = ((bool)(results[1]));
            sessionID = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void LoginAsync(LoginType login1) {
            this.LoginAsync(login1, null);
        }
        
        /// <remarks/>
        public void LoginAsync(LoginType login1, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        login1}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/Logout", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logout([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID) {
            this.Invoke("Logout", new object[] {
                        sessionID});
        }
        
        /// <remarks/>
        public void LogoutAsync(string sessionID) {
            this.LogoutAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void LogoutAsync(string sessionID, object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[] {
                        sessionID}, this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendEnvelope", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendEnvelope([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType envelope, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool sendEnvelopeResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendEnvelopeResultSpecified) {
            object[] results = this.Invoke("sendEnvelope", new object[] {
                        envelope,
                        sessionID});
            sendEnvelopeResult = ((bool)(results[0]));
            sendEnvelopeResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendEnvelopeAsync(DocumentType envelope, string sessionID) {
            this.sendEnvelopeAsync(envelope, sessionID, null);
        }
        
        /// <remarks/>
        public void sendEnvelopeAsync(DocumentType envelope, string sessionID, object userState) {
            if ((this.sendEnvelopeOperationCompleted == null)) {
                this.sendEnvelopeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEnvelopeOperationCompleted);
            }
            this.InvokeAsync("sendEnvelope", new object[] {
                        envelope,
                        sessionID}, this.sendEnvelopeOperationCompleted, userState);
        }
        
        private void OnsendEnvelopeOperationCompleted(object arg) {
            if ((this.sendEnvelopeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEnvelopeCompleted(this, new sendEnvelopeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendInvoice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType invoice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string alias, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool sendInvoiceResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendInvoiceResultSpecified) {
            object[] results = this.Invoke("sendInvoice", new object[] {
                        invoice,
                        alias,
                        sessionID});
            sendInvoiceResult = ((bool)(results[0]));
            sendInvoiceResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendInvoiceAsync(DocumentType invoice, string alias, string sessionID) {
            this.sendInvoiceAsync(invoice, alias, sessionID, null);
        }
        
        /// <remarks/>
        public void sendInvoiceAsync(DocumentType invoice, string alias, string sessionID, object userState) {
            if ((this.sendInvoiceOperationCompleted == null)) {
                this.sendInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendInvoiceOperationCompleted);
            }
            this.InvokeAsync("sendInvoice", new object[] {
                        invoice,
                        alias,
                        sessionID}, this.sendInvoiceOperationCompleted, userState);
        }
        
        private void OnsendInvoiceOperationCompleted(object arg) {
            if ((this.sendInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendInvoiceCompleted(this, new sendInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendApplicationResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendApplicationResponse([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType appResp, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string alias, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool sendApplicationResponseResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendApplicationResponseResultSpecified) {
            object[] results = this.Invoke("sendApplicationResponse", new object[] {
                        appResp,
                        alias,
                        sessionID});
            sendApplicationResponseResult = ((bool)(results[0]));
            sendApplicationResponseResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendApplicationResponseAsync(DocumentType appResp, string alias, string sessionID) {
            this.sendApplicationResponseAsync(appResp, alias, sessionID, null);
        }
        
        /// <remarks/>
        public void sendApplicationResponseAsync(DocumentType appResp, string alias, string sessionID, object userState) {
            if ((this.sendApplicationResponseOperationCompleted == null)) {
                this.sendApplicationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendApplicationResponseOperationCompleted);
            }
            this.InvokeAsync("sendApplicationResponse", new object[] {
                        appResp,
                        alias,
                        sessionID}, this.sendApplicationResponseOperationCompleted, userState);
        }
        
        private void OnsendApplicationResponseOperationCompleted(object arg) {
            if ((this.sendApplicationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendApplicationResponseCompleted(this, new sendApplicationResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendEnvelopeEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendEnvelopeEx([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType envelope, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long sendEnvelopeExResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendEnvelopeExResultSpecified) {
            object[] results = this.Invoke("sendEnvelopeEx", new object[] {
                        envelope,
                        sessionID});
            sendEnvelopeExResult = ((long)(results[0]));
            sendEnvelopeExResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendEnvelopeExAsync(DocumentType envelope, string sessionID) {
            this.sendEnvelopeExAsync(envelope, sessionID, null);
        }
        
        /// <remarks/>
        public void sendEnvelopeExAsync(DocumentType envelope, string sessionID, object userState) {
            if ((this.sendEnvelopeExOperationCompleted == null)) {
                this.sendEnvelopeExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEnvelopeExOperationCompleted);
            }
            this.InvokeAsync("sendEnvelopeEx", new object[] {
                        envelope,
                        sessionID}, this.sendEnvelopeExOperationCompleted, userState);
        }
        
        private void OnsendEnvelopeExOperationCompleted(object arg) {
            if ((this.sendEnvelopeExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEnvelopeExCompleted(this, new sendEnvelopeExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendInvoiceEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendInvoiceEx([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType invoice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string alias, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long sendInvoiceExResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendInvoiceExResultSpecified) {
            object[] results = this.Invoke("sendInvoiceEx", new object[] {
                        invoice,
                        alias,
                        sessionID});
            sendInvoiceExResult = ((long)(results[0]));
            sendInvoiceExResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendInvoiceExAsync(DocumentType invoice, string alias, string sessionID) {
            this.sendInvoiceExAsync(invoice, alias, sessionID, null);
        }
        
        /// <remarks/>
        public void sendInvoiceExAsync(DocumentType invoice, string alias, string sessionID, object userState) {
            if ((this.sendInvoiceExOperationCompleted == null)) {
                this.sendInvoiceExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendInvoiceExOperationCompleted);
            }
            this.InvokeAsync("sendInvoiceEx", new object[] {
                        invoice,
                        alias,
                        sessionID}, this.sendInvoiceExOperationCompleted, userState);
        }
        
        private void OnsendInvoiceExOperationCompleted(object arg) {
            if ((this.sendInvoiceExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendInvoiceExCompleted(this, new sendInvoiceExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendSignedInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendSignedInvoice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType invoice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string alias, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long sendSignedInvoiceResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendSignedInvoiceResultSpecified) {
            object[] results = this.Invoke("sendSignedInvoice", new object[] {
                        invoice,
                        alias,
                        sessionID});
            sendSignedInvoiceResult = ((long)(results[0]));
            sendSignedInvoiceResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendSignedInvoiceAsync(DocumentType invoice, string alias, string sessionID) {
            this.sendSignedInvoiceAsync(invoice, alias, sessionID, null);
        }
        
        /// <remarks/>
        public void sendSignedInvoiceAsync(DocumentType invoice, string alias, string sessionID, object userState) {
            if ((this.sendSignedInvoiceOperationCompleted == null)) {
                this.sendSignedInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSignedInvoiceOperationCompleted);
            }
            this.InvokeAsync("sendSignedInvoice", new object[] {
                        invoice,
                        alias,
                        sessionID}, this.sendSignedInvoiceOperationCompleted, userState);
        }
        
        private void OnsendSignedInvoiceOperationCompleted(object arg) {
            if ((this.sendSignedInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSignedInvoiceCompleted(this, new sendSignedInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendApplicationResponseEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendApplicationResponseEx([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType appResp, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string alias, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long sendApplicationResponseExResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendApplicationResponseExResultSpecified) {
            object[] results = this.Invoke("sendApplicationResponseEx", new object[] {
                        appResp,
                        alias,
                        sessionID});
            sendApplicationResponseExResult = ((long)(results[0]));
            sendApplicationResponseExResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendApplicationResponseExAsync(DocumentType appResp, string alias, string sessionID) {
            this.sendApplicationResponseExAsync(appResp, alias, sessionID, null);
        }
        
        /// <remarks/>
        public void sendApplicationResponseExAsync(DocumentType appResp, string alias, string sessionID, object userState) {
            if ((this.sendApplicationResponseExOperationCompleted == null)) {
                this.sendApplicationResponseExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendApplicationResponseExOperationCompleted);
            }
            this.InvokeAsync("sendApplicationResponseEx", new object[] {
                        appResp,
                        alias,
                        sessionID}, this.sendApplicationResponseExOperationCompleted, userState);
        }
        
        private void OnsendApplicationResponseExOperationCompleted(object arg) {
            if ((this.sendApplicationResponseExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendApplicationResponseExCompleted(this, new sendApplicationResponseExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendEArchiveDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendEArchiveDocument([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType document, EArchiveDocumentTypes docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified, bool isSigned, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isSignedSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string xsltUuid, out long sendEArchiveDocumentResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendEArchiveDocumentResultSpecified) {
            object[] results = this.Invoke("sendEArchiveDocument", new object[] {
                        document,
                        docType,
                        docTypeSpecified,
                        isSigned,
                        isSignedSpecified,
                        sessionID,
                        xsltUuid});
            sendEArchiveDocumentResult = ((long)(results[0]));
            sendEArchiveDocumentResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendEArchiveDocumentAsync(DocumentType document, EArchiveDocumentTypes docType, bool docTypeSpecified, bool isSigned, bool isSignedSpecified, string sessionID, string xsltUuid) {
            this.sendEArchiveDocumentAsync(document, docType, docTypeSpecified, isSigned, isSignedSpecified, sessionID, xsltUuid, null);
        }
        
        /// <remarks/>
        public void sendEArchiveDocumentAsync(DocumentType document, EArchiveDocumentTypes docType, bool docTypeSpecified, bool isSigned, bool isSignedSpecified, string sessionID, string xsltUuid, object userState) {
            if ((this.sendEArchiveDocumentOperationCompleted == null)) {
                this.sendEArchiveDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEArchiveDocumentOperationCompleted);
            }
            this.InvokeAsync("sendEArchiveDocument", new object[] {
                        document,
                        docType,
                        docTypeSpecified,
                        isSigned,
                        isSignedSpecified,
                        sessionID,
                        xsltUuid}, this.sendEArchiveDocumentOperationCompleted, userState);
        }
        
        private void OnsendEArchiveDocumentOperationCompleted(object arg) {
            if ((this.sendEArchiveDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEArchiveDocumentCompleted(this, new sendEArchiveDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveDocument([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool receiveDocumentResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveDocumentResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("receiveDocument", new object[] {
                        sessionID});
            receiveDocumentResult = ((bool)(results[0]));
            receiveDocumentResultSpecified = ((bool)(results[1]));
            document = ((DocumentType)(results[2]));
        }
        
        /// <remarks/>
        public void receiveDocumentAsync(string sessionID) {
            this.receiveDocumentAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void receiveDocumentAsync(string sessionID, object userState) {
            if ((this.receiveDocumentOperationCompleted == null)) {
                this.receiveDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveDocumentOperationCompleted);
            }
            this.InvokeAsync("receiveDocument", new object[] {
                        sessionID}, this.receiveDocumentOperationCompleted, userState);
        }
        
        private void OnreceiveDocumentOperationCompleted(object arg) {
            if ((this.receiveDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveDocumentCompleted(this, new receiveDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveDone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveDone([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long receiveDoneResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveDoneResultSpecified) {
            object[] results = this.Invoke("receiveDone", new object[] {
                        fileID,
                        sessionID});
            receiveDoneResult = ((long)(results[0]));
            receiveDoneResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveDoneAsync(string fileID, string sessionID) {
            this.receiveDoneAsync(fileID, sessionID, null);
        }
        
        /// <remarks/>
        public void receiveDoneAsync(string fileID, string sessionID, object userState) {
            if ((this.receiveDoneOperationCompleted == null)) {
                this.receiveDoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveDoneOperationCompleted);
            }
            this.InvokeAsync("receiveDone", new object[] {
                        fileID,
                        sessionID}, this.receiveDoneOperationCompleted, userState);
        }
        
        private void OnreceiveDoneOperationCompleted(object arg) {
            if ((this.receiveDoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveDoneCompleted(this, new receiveDoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveInvoice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool receiveInvoiceResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveInvoiceResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out ElementType document) {
            object[] results = this.Invoke("receiveInvoice", new object[] {
                        sessionID});
            receiveInvoiceResult = ((bool)(results[0]));
            receiveInvoiceResultSpecified = ((bool)(results[1]));
            document = ((ElementType)(results[2]));
        }
        
        /// <remarks/>
        public void receiveInvoiceAsync(string sessionID) {
            this.receiveInvoiceAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void receiveInvoiceAsync(string sessionID, object userState) {
            if ((this.receiveInvoiceOperationCompleted == null)) {
                this.receiveInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveInvoiceOperationCompleted);
            }
            this.InvokeAsync("receiveInvoice", new object[] {
                        sessionID}, this.receiveInvoiceOperationCompleted, userState);
        }
        
        private void OnreceiveInvoiceOperationCompleted(object arg) {
            if ((this.receiveInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveInvoiceCompleted(this, new receiveInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveInvoiceDone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveInvoiceDone([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long receiveInvoiceDoneResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveInvoiceDoneResultSpecified) {
            object[] results = this.Invoke("receiveInvoiceDone", new object[] {
                        uuid,
                        sessionID});
            receiveInvoiceDoneResult = ((long)(results[0]));
            receiveInvoiceDoneResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveInvoiceDoneAsync(string uuid, string sessionID) {
            this.receiveInvoiceDoneAsync(uuid, sessionID, null);
        }
        
        /// <remarks/>
        public void receiveInvoiceDoneAsync(string uuid, string sessionID, object userState) {
            if ((this.receiveInvoiceDoneOperationCompleted == null)) {
                this.receiveInvoiceDoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveInvoiceDoneOperationCompleted);
            }
            this.InvokeAsync("receiveInvoiceDone", new object[] {
                        uuid,
                        sessionID}, this.receiveInvoiceDoneOperationCompleted, userState);
        }
        
        private void OnreceiveInvoiceDoneOperationCompleted(object arg) {
            if ((this.receiveInvoiceDoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveInvoiceDoneCompleted(this, new receiveInvoiceDoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveApplicationResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveApplicationResponse([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool receiveApplicationResponseResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveApplicationResponseResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out ElementType document) {
            object[] results = this.Invoke("receiveApplicationResponse", new object[] {
                        sessionID});
            receiveApplicationResponseResult = ((bool)(results[0]));
            receiveApplicationResponseResultSpecified = ((bool)(results[1]));
            document = ((ElementType)(results[2]));
        }
        
        /// <remarks/>
        public void receiveApplicationResponseAsync(string sessionID) {
            this.receiveApplicationResponseAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void receiveApplicationResponseAsync(string sessionID, object userState) {
            if ((this.receiveApplicationResponseOperationCompleted == null)) {
                this.receiveApplicationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveApplicationResponseOperationCompleted);
            }
            this.InvokeAsync("receiveApplicationResponse", new object[] {
                        sessionID}, this.receiveApplicationResponseOperationCompleted, userState);
        }
        
        private void OnreceiveApplicationResponseOperationCompleted(object arg) {
            if ((this.receiveApplicationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveApplicationResponseCompleted(this, new receiveApplicationResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/receiveApplicationResponseDone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveApplicationResponseDone([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out long receiveApplicationResponseDoneResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveApplicationResponseDoneResultSpecified) {
            object[] results = this.Invoke("receiveApplicationResponseDone", new object[] {
                        uuid,
                        sessionID});
            receiveApplicationResponseDoneResult = ((long)(results[0]));
            receiveApplicationResponseDoneResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveApplicationResponseDoneAsync(string uuid, string sessionID) {
            this.receiveApplicationResponseDoneAsync(uuid, sessionID, null);
        }
        
        /// <remarks/>
        public void receiveApplicationResponseDoneAsync(string uuid, string sessionID, object userState) {
            if ((this.receiveApplicationResponseDoneOperationCompleted == null)) {
                this.receiveApplicationResponseDoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveApplicationResponseDoneOperationCompleted);
            }
            this.InvokeAsync("receiveApplicationResponseDone", new object[] {
                        uuid,
                        sessionID}, this.receiveApplicationResponseDoneOperationCompleted, userState);
        }
        
        private void OnreceiveApplicationResponseDoneOperationCompleted(object arg) {
            if ((this.receiveApplicationResponseDoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveApplicationResponseDoneCompleted(this, new receiveApplicationResponseDoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getApplicationResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getApplicationResponse([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string envelopeID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getApplicationResponseResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getApplicationResponseResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("getApplicationResponse", new object[] {
                        envelopeID,
                        sessionID});
            getApplicationResponseResult = ((bool)(results[0]));
            getApplicationResponseResultSpecified = ((bool)(results[1]));
            document = ((DocumentType)(results[2]));
        }
        
        /// <remarks/>
        public void getApplicationResponseAsync(string envelopeID, string sessionID) {
            this.getApplicationResponseAsync(envelopeID, sessionID, null);
        }
        
        /// <remarks/>
        public void getApplicationResponseAsync(string envelopeID, string sessionID, object userState) {
            if ((this.getApplicationResponseOperationCompleted == null)) {
                this.getApplicationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetApplicationResponseOperationCompleted);
            }
            this.InvokeAsync("getApplicationResponse", new object[] {
                        envelopeID,
                        sessionID}, this.getApplicationResponseOperationCompleted, userState);
        }
        
        private void OngetApplicationResponseOperationCompleted(object arg) {
            if ((this.getApplicationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getApplicationResponseCompleted(this, new getApplicationResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getInvoiceStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getInvoiceStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getInvoiceStatusResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getInvoiceStatusResultSpecified, out InvoiceStatus status, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool statusSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusDescription, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string envelopeId) {
            object[] results = this.Invoke("getInvoiceStatus", new object[] {
                        uuid,
                        sessionID});
            getInvoiceStatusResult = ((bool)(results[0]));
            getInvoiceStatusResultSpecified = ((bool)(results[1]));
            status = ((InvoiceStatus)(results[2]));
            statusSpecified = ((bool)(results[3]));
            statusDescription = ((string)(results[4]));
            envelopeId = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void getInvoiceStatusAsync(string uuid, string sessionID) {
            this.getInvoiceStatusAsync(uuid, sessionID, null);
        }
        
        /// <remarks/>
        public void getInvoiceStatusAsync(string uuid, string sessionID, object userState) {
            if ((this.getInvoiceStatusOperationCompleted == null)) {
                this.getInvoiceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvoiceStatusOperationCompleted);
            }
            this.InvokeAsync("getInvoiceStatus", new object[] {
                        uuid,
                        sessionID}, this.getInvoiceStatusOperationCompleted, userState);
        }
        
        private void OngetInvoiceStatusOperationCompleted(object arg) {
            if ((this.getInvoiceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvoiceStatusCompleted(this, new getInvoiceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getAppRespStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getAppRespStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getAppRespStatusResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getAppRespStatusResultSpecified, out AppRespStatus status, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool statusSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusDescription, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string envelopeId) {
            object[] results = this.Invoke("getAppRespStatus", new object[] {
                        uuid,
                        sessionID});
            getAppRespStatusResult = ((bool)(results[0]));
            getAppRespStatusResultSpecified = ((bool)(results[1]));
            status = ((AppRespStatus)(results[2]));
            statusSpecified = ((bool)(results[3]));
            statusDescription = ((string)(results[4]));
            envelopeId = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void getAppRespStatusAsync(string uuid, string sessionID) {
            this.getAppRespStatusAsync(uuid, sessionID, null);
        }
        
        /// <remarks/>
        public void getAppRespStatusAsync(string uuid, string sessionID, object userState) {
            if ((this.getAppRespStatusOperationCompleted == null)) {
                this.getAppRespStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAppRespStatusOperationCompleted);
            }
            this.InvokeAsync("getAppRespStatus", new object[] {
                        uuid,
                        sessionID}, this.getAppRespStatusOperationCompleted, userState);
        }
        
        private void OngetAppRespStatusOperationCompleted(object arg) {
            if ((this.getAppRespStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAppRespStatusCompleted(this, new getAppRespStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getEnvelopeList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] getEnvelopeList(System.DateTime beginDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool beginDateSpecified, System.DateTime endDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool endDateSpecified, SendRecvType opType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool opTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, PostBoxDateType dateBy, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dateBySpecified) {
            object[] results = this.Invoke("getEnvelopeList", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        opType,
                        opTypeSpecified,
                        sessionID,
                        dateBy,
                        dateBySpecified});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getEnvelopeListAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, SendRecvType opType, bool opTypeSpecified, string sessionID, PostBoxDateType dateBy, bool dateBySpecified) {
            this.getEnvelopeListAsync(beginDate, beginDateSpecified, endDate, endDateSpecified, opType, opTypeSpecified, sessionID, dateBy, dateBySpecified, null);
        }
        
        /// <remarks/>
        public void getEnvelopeListAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, SendRecvType opType, bool opTypeSpecified, string sessionID, PostBoxDateType dateBy, bool dateBySpecified, object userState) {
            if ((this.getEnvelopeListOperationCompleted == null)) {
                this.getEnvelopeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEnvelopeListOperationCompleted);
            }
            this.InvokeAsync("getEnvelopeList", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        opType,
                        opTypeSpecified,
                        sessionID,
                        dateBy,
                        dateBySpecified}, this.getEnvelopeListOperationCompleted, userState);
        }
        
        private void OngetEnvelopeListOperationCompleted(object arg) {
            if ((this.getEnvelopeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEnvelopeListCompleted(this, new getEnvelopeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getEnvelope", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getEnvelope([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string envelopeID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID) {
            object[] results = this.Invoke("getEnvelope", new object[] {
                        envelopeID,
                        sessionID});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getEnvelopeAsync(string envelopeID, string sessionID) {
            this.getEnvelopeAsync(envelopeID, sessionID, null);
        }
        
        /// <remarks/>
        public void getEnvelopeAsync(string envelopeID, string sessionID, object userState) {
            if ((this.getEnvelopeOperationCompleted == null)) {
                this.getEnvelopeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEnvelopeOperationCompleted);
            }
            this.InvokeAsync("getEnvelope", new object[] {
                        envelopeID,
                        sessionID}, this.getEnvelopeOperationCompleted, userState);
        }
        
        private void OngetEnvelopeOperationCompleted(object arg) {
            if ((this.getEnvelopeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEnvelopeCompleted(this, new getEnvelopeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getInvoiceList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] getInvoiceList(System.DateTime beginDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool beginDateSpecified, System.DateTime endDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool endDateSpecified, SendRecvType opType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool opTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, InvoiceDateType dateBy, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dateBySpecified) {
            object[] results = this.Invoke("getInvoiceList", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        opType,
                        opTypeSpecified,
                        sessionID,
                        dateBy,
                        dateBySpecified});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getInvoiceListAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, SendRecvType opType, bool opTypeSpecified, string sessionID, InvoiceDateType dateBy, bool dateBySpecified) {
            this.getInvoiceListAsync(beginDate, beginDateSpecified, endDate, endDateSpecified, opType, opTypeSpecified, sessionID, dateBy, dateBySpecified, null);
        }
        
        /// <remarks/>
        public void getInvoiceListAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, SendRecvType opType, bool opTypeSpecified, string sessionID, InvoiceDateType dateBy, bool dateBySpecified, object userState) {
            if ((this.getInvoiceListOperationCompleted == null)) {
                this.getInvoiceListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvoiceListOperationCompleted);
            }
            this.InvokeAsync("getInvoiceList", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        opType,
                        opTypeSpecified,
                        sessionID,
                        dateBy,
                        dateBySpecified}, this.getInvoiceListOperationCompleted, userState);
        }
        
        private void OngetInvoiceListOperationCompleted(object arg) {
            if ((this.getInvoiceListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvoiceListCompleted(this, new getInvoiceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getInvoice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string invoiceID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID) {
            object[] results = this.Invoke("getInvoice", new object[] {
                        invoiceID,
                        sessionID});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getInvoiceAsync(string invoiceID, string sessionID) {
            this.getInvoiceAsync(invoiceID, sessionID, null);
        }
        
        /// <remarks/>
        public void getInvoiceAsync(string invoiceID, string sessionID, object userState) {
            if ((this.getInvoiceOperationCompleted == null)) {
                this.getInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvoiceOperationCompleted);
            }
            this.InvokeAsync("getInvoice", new object[] {
                        invoiceID,
                        sessionID}, this.getInvoiceOperationCompleted, userState);
        }
        
        private void OngetInvoiceOperationCompleted(object arg) {
            if ((this.getInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvoiceCompleted(this, new getInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getUserList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getUserList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] LoginType login, UserListType listType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool listTypeSpecified) {
            object[] results = this.Invoke("getUserList", new object[] {
                        login,
                        listType,
                        listTypeSpecified});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getUserListAsync(LoginType login, UserListType listType, bool listTypeSpecified) {
            this.getUserListAsync(login, listType, listTypeSpecified, null);
        }
        
        /// <remarks/>
        public void getUserListAsync(LoginType login, UserListType listType, bool listTypeSpecified, object userState) {
            if ((this.getUserListOperationCompleted == null)) {
                this.getUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserListOperationCompleted);
            }
            this.InvokeAsync("getUserList", new object[] {
                        login,
                        listType,
                        listTypeSpecified}, this.getUserListOperationCompleted, userState);
        }
        
        private void OngetUserListOperationCompleted(object arg) {
            if ((this.getUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserListCompleted(this, new getUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getUserListNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getUserListNew([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] LoginType login, UserListType listType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool listTypeSpecified) {
            object[] results = this.Invoke("getUserListNew", new object[] {
                        login,
                        listType,
                        listTypeSpecified});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getUserListNewAsync(LoginType login, UserListType listType, bool listTypeSpecified) {
            this.getUserListNewAsync(login, listType, listTypeSpecified, null);
        }
        
        /// <remarks/>
        public void getUserListNewAsync(LoginType login, UserListType listType, bool listTypeSpecified, object userState) {
            if ((this.getUserListNewOperationCompleted == null)) {
                this.getUserListNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserListNewOperationCompleted);
            }
            this.InvokeAsync("getUserListNew", new object[] {
                        login,
                        listType,
                        listTypeSpecified}, this.getUserListNewOperationCompleted, userState);
        }
        
        private void OngetUserListNewOperationCompleted(object arg) {
            if ((this.getUserListNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserListNewCompleted(this, new getUserListNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getApprovalFlowList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getApprovalFlowList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getApprovalFlowListResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getApprovalFlowListResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("getApprovalFlowList", new object[] {
                        sessionID});
            getApprovalFlowListResult = ((bool)(results[0]));
            getApprovalFlowListResultSpecified = ((bool)(results[1]));
            document = ((DocumentType)(results[2]));
        }
        
        /// <remarks/>
        public void getApprovalFlowListAsync(string sessionID) {
            this.getApprovalFlowListAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getApprovalFlowListAsync(string sessionID, object userState) {
            if ((this.getApprovalFlowListOperationCompleted == null)) {
                this.getApprovalFlowListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetApprovalFlowListOperationCompleted);
            }
            this.InvokeAsync("getApprovalFlowList", new object[] {
                        sessionID}, this.getApprovalFlowListOperationCompleted, userState);
        }
        
        private void OngetApprovalFlowListOperationCompleted(object arg) {
            if ((this.getApprovalFlowListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getApprovalFlowListCompleted(this, new getApprovalFlowListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/setApprovalFlowId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setApprovalFlowId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string invoiceUuid, int flowId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool flowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool setApprovalFlowIdResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool setApprovalFlowIdResultSpecified) {
            object[] results = this.Invoke("setApprovalFlowId", new object[] {
                        invoiceUuid,
                        flowId,
                        flowIdSpecified,
                        sessionID});
            setApprovalFlowIdResult = ((bool)(results[0]));
            setApprovalFlowIdResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void setApprovalFlowIdAsync(string invoiceUuid, int flowId, bool flowIdSpecified, string sessionID) {
            this.setApprovalFlowIdAsync(invoiceUuid, flowId, flowIdSpecified, sessionID, null);
        }
        
        /// <remarks/>
        public void setApprovalFlowIdAsync(string invoiceUuid, int flowId, bool flowIdSpecified, string sessionID, object userState) {
            if ((this.setApprovalFlowIdOperationCompleted == null)) {
                this.setApprovalFlowIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetApprovalFlowIdOperationCompleted);
            }
            this.InvokeAsync("setApprovalFlowId", new object[] {
                        invoiceUuid,
                        flowId,
                        flowIdSpecified,
                        sessionID}, this.setApprovalFlowIdOperationCompleted, userState);
        }
        
        private void OnsetApprovalFlowIdOperationCompleted(object arg) {
            if ((this.setApprovalFlowIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setApprovalFlowIdCompleted(this, new setApprovalFlowIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getApprovalFlowRes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getApprovalFlowRes([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string invoiceUuid, int flowId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool flowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getApprovalFlowResResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getApprovalFlowResResultSpecified, out int flowRes, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool flowResSpecified, out int flowAction, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool flowActionSpecified) {
            object[] results = this.Invoke("getApprovalFlowRes", new object[] {
                        invoiceUuid,
                        flowId,
                        flowIdSpecified,
                        sessionID});
            getApprovalFlowResResult = ((bool)(results[0]));
            getApprovalFlowResResultSpecified = ((bool)(results[1]));
            flowRes = ((int)(results[2]));
            flowResSpecified = ((bool)(results[3]));
            flowAction = ((int)(results[4]));
            flowActionSpecified = ((bool)(results[5]));
        }
        
        /// <remarks/>
        public void getApprovalFlowResAsync(string invoiceUuid, int flowId, bool flowIdSpecified, string sessionID) {
            this.getApprovalFlowResAsync(invoiceUuid, flowId, flowIdSpecified, sessionID, null);
        }
        
        /// <remarks/>
        public void getApprovalFlowResAsync(string invoiceUuid, int flowId, bool flowIdSpecified, string sessionID, object userState) {
            if ((this.getApprovalFlowResOperationCompleted == null)) {
                this.getApprovalFlowResOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetApprovalFlowResOperationCompleted);
            }
            this.InvokeAsync("getApprovalFlowRes", new object[] {
                        invoiceUuid,
                        flowId,
                        flowIdSpecified,
                        sessionID}, this.getApprovalFlowResOperationCompleted, userState);
        }
        
        private void OngetApprovalFlowResOperationCompleted(object arg) {
            if ((this.getApprovalFlowResCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getApprovalFlowResCompleted(this, new getApprovalFlowResCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getDocumentStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getDocumentStatus(int docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, long relRef, [System.Xml.Serialization.XmlIgnoreAttribute()] bool relRefSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out int respStatus, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool respStatusSpecified, out int responseCode, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool responseCodeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string responseDesc, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string envelopeId) {
            object[] results = this.Invoke("getDocumentStatus", new object[] {
                        docType,
                        docTypeSpecified,
                        uuid,
                        relRef,
                        relRefSpecified,
                        sessionID});
            respStatus = ((int)(results[0]));
            respStatusSpecified = ((bool)(results[1]));
            responseCode = ((int)(results[2]));
            responseCodeSpecified = ((bool)(results[3]));
            responseDesc = ((string)(results[4]));
            envelopeId = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void getDocumentStatusAsync(int docType, bool docTypeSpecified, string uuid, long relRef, bool relRefSpecified, string sessionID) {
            this.getDocumentStatusAsync(docType, docTypeSpecified, uuid, relRef, relRefSpecified, sessionID, null);
        }
        
        /// <remarks/>
        public void getDocumentStatusAsync(int docType, bool docTypeSpecified, string uuid, long relRef, bool relRefSpecified, string sessionID, object userState) {
            if ((this.getDocumentStatusOperationCompleted == null)) {
                this.getDocumentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentStatusOperationCompleted);
            }
            this.InvokeAsync("getDocumentStatus", new object[] {
                        docType,
                        docTypeSpecified,
                        uuid,
                        relRef,
                        relRefSpecified,
                        sessionID}, this.getDocumentStatusOperationCompleted, userState);
        }
        
        private void OngetDocumentStatusOperationCompleted(object arg) {
            if ((this.getDocumentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentStatusCompleted(this, new getDocumentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getDocumentStatusEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getDocumentStatusEx(int docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, long relRef, [System.Xml.Serialization.XmlIgnoreAttribute()] bool relRefSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out int respStatus, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool respStatusSpecified, out int responseCode, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool responseCodeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string responseDesc, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string envelopeId, out System.DateTime currentDate, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool currentDateSpecified) {
            object[] results = this.Invoke("getDocumentStatusEx", new object[] {
                        docType,
                        docTypeSpecified,
                        uuid,
                        relRef,
                        relRefSpecified,
                        sessionID});
            respStatus = ((int)(results[0]));
            respStatusSpecified = ((bool)(results[1]));
            responseCode = ((int)(results[2]));
            responseCodeSpecified = ((bool)(results[3]));
            responseDesc = ((string)(results[4]));
            envelopeId = ((string)(results[5]));
            currentDate = ((System.DateTime)(results[6]));
            currentDateSpecified = ((bool)(results[7]));
        }
        
        /// <remarks/>
        public void getDocumentStatusExAsync(int docType, bool docTypeSpecified, string uuid, long relRef, bool relRefSpecified, string sessionID) {
            this.getDocumentStatusExAsync(docType, docTypeSpecified, uuid, relRef, relRefSpecified, sessionID, null);
        }
        
        /// <remarks/>
        public void getDocumentStatusExAsync(int docType, bool docTypeSpecified, string uuid, long relRef, bool relRefSpecified, string sessionID, object userState) {
            if ((this.getDocumentStatusExOperationCompleted == null)) {
                this.getDocumentStatusExOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentStatusExOperationCompleted);
            }
            this.InvokeAsync("getDocumentStatusEx", new object[] {
                        docType,
                        docTypeSpecified,
                        uuid,
                        relRef,
                        relRefSpecified,
                        sessionID}, this.getDocumentStatusExOperationCompleted, userState);
        }
        
        private void OngetDocumentStatusExOperationCompleted(object arg) {
            if ((this.getDocumentStatusExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentStatusExCompleted(this, new getDocumentStatusExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getEArchiveXslt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getEArchiveXslt([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out bool getEArchiveXsltResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getEArchiveXsltResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("getEArchiveXslt", new object[] {
                        sessionID});
            getEArchiveXsltResult = ((bool)(results[0]));
            getEArchiveXsltResultSpecified = ((bool)(results[1]));
            document = ((DocumentType)(results[2]));
        }
        
        /// <remarks/>
        public void getEArchiveXsltAsync(string sessionID) {
            this.getEArchiveXsltAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getEArchiveXsltAsync(string sessionID, object userState) {
            if ((this.getEArchiveXsltOperationCompleted == null)) {
                this.getEArchiveXsltOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEArchiveXsltOperationCompleted);
            }
            this.InvokeAsync("getEArchiveXslt", new object[] {
                        sessionID}, this.getEArchiveXsltOperationCompleted, userState);
        }
        
        private void OngetEArchiveXsltOperationCompleted(object arg) {
            if ((this.getEArchiveXsltCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEArchiveXsltCompleted(this, new getEArchiveXsltCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getInvoiceApplicationResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getInvoiceApplicationResponse([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, out int getInvoiceApplicationResponseResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getInvoiceApplicationResponseResultSpecified) {
            object[] results = this.Invoke("getInvoiceApplicationResponse", new object[] {
                        sessionID,
                        uuid});
            getInvoiceApplicationResponseResult = ((int)(results[0]));
            getInvoiceApplicationResponseResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void getInvoiceApplicationResponseAsync(string sessionID, string uuid) {
            this.getInvoiceApplicationResponseAsync(sessionID, uuid, null);
        }
        
        /// <remarks/>
        public void getInvoiceApplicationResponseAsync(string sessionID, string uuid, object userState) {
            if ((this.getInvoiceApplicationResponseOperationCompleted == null)) {
                this.getInvoiceApplicationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvoiceApplicationResponseOperationCompleted);
            }
            this.InvokeAsync("getInvoiceApplicationResponse", new object[] {
                        sessionID,
                        uuid}, this.getInvoiceApplicationResponseOperationCompleted, userState);
        }
        
        private void OngetInvoiceApplicationResponseOperationCompleted(object arg) {
            if ((this.getInvoiceApplicationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvoiceApplicationResponseCompleted(this, new getInvoiceApplicationResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getInvoiceResponseData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getInvoiceResponseData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string responseType, out bool getInvoiceResponseDataResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getInvoiceResponseDataResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("getInvoiceResponseData", new object[] {
                        sessionID,
                        uuid,
                        responseType});
            getInvoiceResponseDataResult = ((bool)(results[0]));
            getInvoiceResponseDataResultSpecified = ((bool)(results[1]));
            document = ((DocumentType)(results[2]));
        }
        
        /// <remarks/>
        public void getInvoiceResponseDataAsync(string sessionID, string uuid, string responseType) {
            this.getInvoiceResponseDataAsync(sessionID, uuid, responseType, null);
        }
        
        /// <remarks/>
        public void getInvoiceResponseDataAsync(string sessionID, string uuid, string responseType, object userState) {
            if ((this.getInvoiceResponseDataOperationCompleted == null)) {
                this.getInvoiceResponseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvoiceResponseDataOperationCompleted);
            }
            this.InvokeAsync("getInvoiceResponseData", new object[] {
                        sessionID,
                        uuid,
                        responseType}, this.getInvoiceResponseDataOperationCompleted, userState);
        }
        
        private void OngetInvoiceResponseDataOperationCompleted(object arg) {
            if ((this.getInvoiceResponseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvoiceResponseDataCompleted(this, new getInvoiceResponseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/setApplicationResponseOption", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setApplicationResponseOption([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, int option, [System.Xml.Serialization.XmlIgnoreAttribute()] bool optionSpecified, out bool setApplicationResponseOptionResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool setApplicationResponseOptionResultSpecified) {
            object[] results = this.Invoke("setApplicationResponseOption", new object[] {
                        sessionID,
                        option,
                        optionSpecified});
            setApplicationResponseOptionResult = ((bool)(results[0]));
            setApplicationResponseOptionResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void setApplicationResponseOptionAsync(string sessionID, int option, bool optionSpecified) {
            this.setApplicationResponseOptionAsync(sessionID, option, optionSpecified, null);
        }
        
        /// <remarks/>
        public void setApplicationResponseOptionAsync(string sessionID, int option, bool optionSpecified, object userState) {
            if ((this.setApplicationResponseOptionOperationCompleted == null)) {
                this.setApplicationResponseOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetApplicationResponseOptionOperationCompleted);
            }
            this.InvokeAsync("setApplicationResponseOption", new object[] {
                        sessionID,
                        option,
                        optionSpecified}, this.setApplicationResponseOptionOperationCompleted, userState);
        }
        
        private void OnsetApplicationResponseOptionOperationCompleted(object arg) {
            if ((this.setApplicationResponseOptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setApplicationResponseOptionCompleted(this, new setApplicationResponseOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getEArchiveInvoicePdfData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getEArchiveInvoicePdfData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, bool allInvoicesOrJustSigned, [System.Xml.Serialization.XmlIgnoreAttribute()] bool allInvoicesOrJustSignedSpecified, bool isCanceled, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isCanceledSpecified, out bool getEArchiveInvoicePdfDataResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getEArchiveInvoicePdfDataResultSpecified, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] out byte[] pdfData) {
            object[] results = this.Invoke("getEArchiveInvoicePdfData", new object[] {
                        sessionID,
                        uuid,
                        allInvoicesOrJustSigned,
                        allInvoicesOrJustSignedSpecified,
                        isCanceled,
                        isCanceledSpecified});
            getEArchiveInvoicePdfDataResult = ((bool)(results[0]));
            getEArchiveInvoicePdfDataResultSpecified = ((bool)(results[1]));
            pdfData = ((byte[])(results[2]));
        }
        
        /// <remarks/>
        public void getEArchiveInvoicePdfDataAsync(string sessionID, string uuid, bool allInvoicesOrJustSigned, bool allInvoicesOrJustSignedSpecified, bool isCanceled, bool isCanceledSpecified) {
            this.getEArchiveInvoicePdfDataAsync(sessionID, uuid, allInvoicesOrJustSigned, allInvoicesOrJustSignedSpecified, isCanceled, isCanceledSpecified, null);
        }
        
        /// <remarks/>
        public void getEArchiveInvoicePdfDataAsync(string sessionID, string uuid, bool allInvoicesOrJustSigned, bool allInvoicesOrJustSignedSpecified, bool isCanceled, bool isCanceledSpecified, object userState) {
            if ((this.getEArchiveInvoicePdfDataOperationCompleted == null)) {
                this.getEArchiveInvoicePdfDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEArchiveInvoicePdfDataOperationCompleted);
            }
            this.InvokeAsync("getEArchiveInvoicePdfData", new object[] {
                        sessionID,
                        uuid,
                        allInvoicesOrJustSigned,
                        allInvoicesOrJustSignedSpecified,
                        isCanceled,
                        isCanceledSpecified}, this.getEArchiveInvoicePdfDataOperationCompleted, userState);
        }
        
        private void OngetEArchiveInvoicePdfDataOperationCompleted(object arg) {
            if ((this.getEArchiveInvoicePdfDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEArchiveInvoicePdfDataCompleted(this, new getEArchiveInvoicePdfDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getDocumentData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getDocumentData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, GetDocumentType docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified, DocumentDataType dataType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dataTypeSpecified) {
            object[] results = this.Invoke("getDocumentData", new object[] {
                        sessionID,
                        uuid,
                        docType,
                        docTypeSpecified,
                        dataType,
                        dataTypeSpecified});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentDataAsync(string sessionID, string uuid, GetDocumentType docType, bool docTypeSpecified, DocumentDataType dataType, bool dataTypeSpecified) {
            this.getDocumentDataAsync(sessionID, uuid, docType, docTypeSpecified, dataType, dataTypeSpecified, null);
        }
        
        /// <remarks/>
        public void getDocumentDataAsync(string sessionID, string uuid, GetDocumentType docType, bool docTypeSpecified, DocumentDataType dataType, bool dataTypeSpecified, object userState) {
            if ((this.getDocumentDataOperationCompleted == null)) {
                this.getDocumentDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentDataOperationCompleted);
            }
            this.InvokeAsync("getDocumentData", new object[] {
                        sessionID,
                        uuid,
                        docType,
                        docTypeSpecified,
                        dataType,
                        dataTypeSpecified}, this.getDocumentDataOperationCompleted, userState);
        }
        
        private void OngetDocumentDataOperationCompleted(object arg) {
            if ((this.getDocumentDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentDataCompleted(this, new getDocumentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/getReconciliationList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DocumentType getReconciliationList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, System.DateTime begDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool begDateSpecified, System.DateTime endDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool endDateSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string begNum, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string endNum, SendRecvType opType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool opTypeSpecified, int docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified) {
            object[] results = this.Invoke("getReconciliationList", new object[] {
                        sessionID,
                        begDate,
                        begDateSpecified,
                        endDate,
                        endDateSpecified,
                        begNum,
                        endNum,
                        opType,
                        opTypeSpecified,
                        docType,
                        docTypeSpecified});
            return ((DocumentType)(results[0]));
        }
        
        /// <remarks/>
        public void getReconciliationListAsync(string sessionID, System.DateTime begDate, bool begDateSpecified, System.DateTime endDate, bool endDateSpecified, string begNum, string endNum, SendRecvType opType, bool opTypeSpecified, int docType, bool docTypeSpecified) {
            this.getReconciliationListAsync(sessionID, begDate, begDateSpecified, endDate, endDateSpecified, begNum, endNum, opType, opTypeSpecified, docType, docTypeSpecified, null);
        }
        
        /// <remarks/>
        public void getReconciliationListAsync(string sessionID, System.DateTime begDate, bool begDateSpecified, System.DateTime endDate, bool endDateSpecified, string begNum, string endNum, SendRecvType opType, bool opTypeSpecified, int docType, bool docTypeSpecified, object userState) {
            if ((this.getReconciliationListOperationCompleted == null)) {
                this.getReconciliationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetReconciliationListOperationCompleted);
            }
            this.InvokeAsync("getReconciliationList", new object[] {
                        sessionID,
                        begDate,
                        begDateSpecified,
                        endDate,
                        endDateSpecified,
                        begNum,
                        endNum,
                        opType,
                        opTypeSpecified,
                        docType,
                        docTypeSpecified}, this.getReconciliationListOperationCompleted, userState);
        }
        
        private void OngetReconciliationListOperationCompleted(object arg) {
            if ((this.getReconciliationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getReconciliationListCompleted(this, new getReconciliationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/sendReconciliationReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendReconciliationReport([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType report, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, out int sendReconciliationReportResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendReconciliationReportResultSpecified) {
            object[] results = this.Invoke("sendReconciliationReport", new object[] {
                        report,
                        sessionID});
            sendReconciliationReportResult = ((int)(results[0]));
            sendReconciliationReportResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendReconciliationReportAsync(DocumentType report, string sessionID) {
            this.sendReconciliationReportAsync(report, sessionID, null);
        }
        
        /// <remarks/>
        public void sendReconciliationReportAsync(DocumentType report, string sessionID, object userState) {
            if ((this.sendReconciliationReportOperationCompleted == null)) {
                this.sendReconciliationReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendReconciliationReportOperationCompleted);
            }
            this.InvokeAsync("sendReconciliationReport", new object[] {
                        report,
                        sessionID}, this.sendReconciliationReportOperationCompleted, userState);
        }
        
        private void OnsendReconciliationReportOperationCompleted(object arg) {
            if ((this.sendReconciliationReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendReconciliationReportCompleted(this, new sendReconciliationReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/createElementId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string createElementId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string year, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string invoicePrefix, GetDocumentType docType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docTypeSpecified) {
            object[] results = this.Invoke("createElementId", new object[] {
                        sessionID,
                        year,
                        invoicePrefix,
                        docType,
                        docTypeSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createElementIdAsync(string sessionID, string year, string invoicePrefix, GetDocumentType docType, bool docTypeSpecified) {
            this.createElementIdAsync(sessionID, year, invoicePrefix, docType, docTypeSpecified, null);
        }
        
        /// <remarks/>
        public void createElementIdAsync(string sessionID, string year, string invoicePrefix, GetDocumentType docType, bool docTypeSpecified, object userState) {
            if ((this.createElementIdOperationCompleted == null)) {
                this.createElementIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateElementIdOperationCompleted);
            }
            this.InvokeAsync("createElementId", new object[] {
                        sessionID,
                        year,
                        invoicePrefix,
                        docType,
                        docTypeSpecified}, this.createElementIdOperationCompleted, userState);
        }
        
        private void OncreateElementIdOperationCompleted(object arg) {
            if ((this.createElementIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createElementIdCompleted(this, new createElementIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/cancelEArchiveInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void cancelEArchiveInvoice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string elementId, out long cancelEArchiveInvoiceResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool cancelEArchiveInvoiceResultSpecified) {
            object[] results = this.Invoke("cancelEArchiveInvoice", new object[] {
                        sessionID,
                        uuid,
                        elementId});
            cancelEArchiveInvoiceResult = ((long)(results[0]));
            cancelEArchiveInvoiceResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void cancelEArchiveInvoiceAsync(string sessionID, string uuid, string elementId) {
            this.cancelEArchiveInvoiceAsync(sessionID, uuid, elementId, null);
        }
        
        /// <remarks/>
        public void cancelEArchiveInvoiceAsync(string sessionID, string uuid, string elementId, object userState) {
            if ((this.cancelEArchiveInvoiceOperationCompleted == null)) {
                this.cancelEArchiveInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelEArchiveInvoiceOperationCompleted);
            }
            this.InvokeAsync("cancelEArchiveInvoice", new object[] {
                        sessionID,
                        uuid,
                        elementId}, this.cancelEArchiveInvoiceOperationCompleted, userState);
        }
        
        private void OncancelEArchiveInvoiceOperationCompleted(object arg) {
            if ((this.cancelEArchiveInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelEArchiveInvoiceCompleted(this, new cancelEArchiveInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/SendEArchiveListForReconcilition", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendEArchiveListForReconcilition(System.DateTime beginDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool beginDateSpecified, System.DateTime endDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool endDateSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib")] ReconInvoiceType[] invoiceList, InvoiceType invoiceType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool invoiceTypeSpecified, out int SendEArchiveListForReconcilitionResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SendEArchiveListForReconcilitionResultSpecified) {
            object[] results = this.Invoke("SendEArchiveListForReconcilition", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        sessionID,
                        invoiceList,
                        invoiceType,
                        invoiceTypeSpecified});
            SendEArchiveListForReconcilitionResult = ((int)(results[0]));
            SendEArchiveListForReconcilitionResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SendEArchiveListForReconcilitionAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, string sessionID, ReconInvoiceType[] invoiceList, InvoiceType invoiceType, bool invoiceTypeSpecified) {
            this.SendEArchiveListForReconcilitionAsync(beginDate, beginDateSpecified, endDate, endDateSpecified, sessionID, invoiceList, invoiceType, invoiceTypeSpecified, null);
        }
        
        /// <remarks/>
        public void SendEArchiveListForReconcilitionAsync(System.DateTime beginDate, bool beginDateSpecified, System.DateTime endDate, bool endDateSpecified, string sessionID, ReconInvoiceType[] invoiceList, InvoiceType invoiceType, bool invoiceTypeSpecified, object userState) {
            if ((this.SendEArchiveListForReconcilitionOperationCompleted == null)) {
                this.SendEArchiveListForReconcilitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEArchiveListForReconcilitionOperationCompleted);
            }
            this.InvokeAsync("SendEArchiveListForReconcilition", new object[] {
                        beginDate,
                        beginDateSpecified,
                        endDate,
                        endDateSpecified,
                        sessionID,
                        invoiceList,
                        invoiceType,
                        invoiceTypeSpecified}, this.SendEArchiveListForReconcilitionOperationCompleted, userState);
        }
        
        private void OnSendEArchiveListForReconcilitionOperationCompleted(object arg) {
            if ((this.SendEArchiveListForReconcilitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEArchiveListForReconcilitionCompleted(this, new SendEArchiveListForReconcilitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/SendDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType SendDocument([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DocumentType document, out long refId, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool refIdSpecified) {
            object[] results = this.Invoke("SendDocument", new object[] {
                        sessionID,
                        paramList,
                        document});
            refId = ((long)(results[1]));
            refIdSpecified = ((bool)(results[2]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void SendDocumentAsync(string sessionID, string[] paramList, DocumentType document) {
            this.SendDocumentAsync(sessionID, paramList, document, null);
        }
        
        /// <remarks/>
        public void SendDocumentAsync(string sessionID, string[] paramList, DocumentType document, object userState) {
            if ((this.SendDocumentOperationCompleted == null)) {
                this.SendDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendDocumentOperationCompleted);
            }
            this.InvokeAsync("SendDocument", new object[] {
                        sessionID,
                        paramList,
                        document}, this.SendDocumentOperationCompleted, userState);
        }
        
        private void OnSendDocumentOperationCompleted(object arg) {
            if ((this.SendDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendDocumentCompleted(this, new SendDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocument([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out ElementType document) {
            object[] results = this.Invoke("GetDocument", new object[] {
                        sessionID,
                        paramList});
            document = ((ElementType)(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentAsync(string sessionID, string[] paramList) {
            this.GetDocumentAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetDocumentOperationCompleted == null)) {
                this.GetDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentOperationCompleted);
            }
            this.InvokeAsync("GetDocument", new object[] {
                        sessionID,
                        paramList}, this.GetDocumentOperationCompleted, userState);
        }
        
        private void OnGetDocumentOperationCompleted(object arg) {
            if ((this.GetDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentCompleted(this, new GetDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentDone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentDone([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList) {
            object[] results = this.Invoke("GetDocumentDone", new object[] {
                        sessionID,
                        uuid,
                        paramList});
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentDoneAsync(string sessionID, string uuid, string[] paramList) {
            this.GetDocumentDoneAsync(sessionID, uuid, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentDoneAsync(string sessionID, string uuid, string[] paramList, object userState) {
            if ((this.GetDocumentDoneOperationCompleted == null)) {
                this.GetDocumentDoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentDoneOperationCompleted);
            }
            this.InvokeAsync("GetDocumentDone", new object[] {
                        sessionID,
                        uuid,
                        paramList}, this.GetDocumentDoneOperationCompleted, userState);
        }
        
        private void OnGetDocumentDoneOperationCompleted(object arg) {
            if ((this.GetDocumentDoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentDoneCompleted(this, new GetDocumentDoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentStatusType statusInfo) {
            object[] results = this.Invoke("GetDocumentStatus", new object[] {
                        sessionID,
                        uuid,
                        paramList});
            statusInfo = ((DocumentStatusType)(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentStatusAsync(string sessionID, string uuid, string[] paramList) {
            this.GetDocumentStatusAsync(sessionID, uuid, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentStatusAsync(string sessionID, string uuid, string[] paramList, object userState) {
            if ((this.GetDocumentStatusOperationCompleted == null)) {
                this.GetDocumentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentStatusOperationCompleted);
            }
            this.InvokeAsync("GetDocumentStatus", new object[] {
                        sessionID,
                        uuid,
                        paramList}, this.GetDocumentStatusOperationCompleted, userState);
        }
        
        private void OnGetDocumentStatusOperationCompleted(object arg) {
            if ((this.GetDocumentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentStatusCompleted(this, new GetDocumentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentStatusBatch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentStatusBatch([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] uuidList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")] out DocumentStatusBatchType[] statusInfoList) {
            object[] results = this.Invoke("GetDocumentStatusBatch", new object[] {
                        sessionID,
                        uuidList,
                        paramList});
            statusInfoList = ((DocumentStatusBatchType[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentStatusBatchAsync(string sessionID, string[] uuidList, string[] paramList) {
            this.GetDocumentStatusBatchAsync(sessionID, uuidList, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentStatusBatchAsync(string sessionID, string[] uuidList, string[] paramList, object userState) {
            if ((this.GetDocumentStatusBatchOperationCompleted == null)) {
                this.GetDocumentStatusBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentStatusBatchOperationCompleted);
            }
            this.InvokeAsync("GetDocumentStatusBatch", new object[] {
                        sessionID,
                        uuidList,
                        paramList}, this.GetDocumentStatusBatchOperationCompleted, userState);
        }
        
        private void OnGetDocumentStatusBatchOperationCompleted(object arg) {
            if ((this.GetDocumentStatusBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentStatusBatchCompleted(this, new GetDocumentStatusBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DocumentType document) {
            object[] results = this.Invoke("GetDocumentData", new object[] {
                        sessionID,
                        uuid,
                        paramList});
            document = ((DocumentType)(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentDataAsync(string sessionID, string uuid, string[] paramList) {
            this.GetDocumentDataAsync(sessionID, uuid, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentDataAsync(string sessionID, string uuid, string[] paramList, object userState) {
            if ((this.GetDocumentDataOperationCompleted == null)) {
                this.GetDocumentDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentDataOperationCompleted);
            }
            this.InvokeAsync("GetDocumentData", new object[] {
                        sessionID,
                        uuid,
                        paramList}, this.GetDocumentDataOperationCompleted, userState);
        }
        
        private void OnGetDocumentDataOperationCompleted(object arg) {
            if ((this.GetDocumentDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentDataCompleted(this, new GetDocumentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")] out Document[] docList) {
            object[] results = this.Invoke("GetDocumentList", new object[] {
                        sessionID,
                        paramList});
            docList = ((Document[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListAsync(string sessionID, string[] paramList) {
            this.GetDocumentListAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentListAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetDocumentListOperationCompleted == null)) {
                this.GetDocumentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListOperationCompleted);
            }
            this.InvokeAsync("GetDocumentList", new object[] {
                        sessionID,
                        paramList}, this.GetDocumentListOperationCompleted, userState);
        }
        
        private void OnGetDocumentListOperationCompleted(object arg) {
            if ((this.GetDocumentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListCompleted(this, new GetDocumentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetReportList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetReportList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")] out Report[] reportList) {
            object[] results = this.Invoke("GetReportList", new object[] {
                        sessionID,
                        paramList});
            reportList = ((Report[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportListAsync(string sessionID, string[] paramList) {
            this.GetReportListAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetReportListAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetReportListOperationCompleted == null)) {
                this.GetReportListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportListOperationCompleted);
            }
            this.InvokeAsync("GetReportList", new object[] {
                        sessionID,
                        paramList}, this.GetReportListOperationCompleted, userState);
        }
        
        private void OnGetReportListOperationCompleted(object arg) {
            if ((this.GetReportListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportListCompleted(this, new GetReportListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetValidateGIBUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetValidateGIBUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList) {
            object[] results = this.Invoke("GetValidateGIBUser", new object[] {
                        sessionID,
                        paramList});
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetValidateGIBUserAsync(string sessionID, string[] paramList) {
            this.GetValidateGIBUserAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetValidateGIBUserAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetValidateGIBUserOperationCompleted == null)) {
                this.GetValidateGIBUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetValidateGIBUserOperationCompleted);
            }
            this.InvokeAsync("GetValidateGIBUser", new object[] {
                        sessionID,
                        paramList}, this.GetValidateGIBUserOperationCompleted, userState);
        }
        
        private void OnGetValidateGIBUserOperationCompleted(object arg) {
            if ((this.GetValidateGIBUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetValidateGIBUserCompleted(this, new GetValidateGIBUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/CheckGibUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType CheckGibUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] vknTcknList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")] out GibUserType[] userList) {
            object[] results = this.Invoke("CheckGibUser", new object[] {
                        sessionID,
                        vknTcknList});
            userList = ((GibUserType[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void CheckGibUserAsync(string sessionID, string[] vknTcknList) {
            this.CheckGibUserAsync(sessionID, vknTcknList, null);
        }
        
        /// <remarks/>
        public void CheckGibUserAsync(string sessionID, string[] vknTcknList, object userState) {
            if ((this.CheckGibUserOperationCompleted == null)) {
                this.CheckGibUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckGibUserOperationCompleted);
            }
            this.InvokeAsync("CheckGibUser", new object[] {
                        sessionID,
                        vknTcknList}, this.CheckGibUserOperationCompleted, userState);
        }
        
        private void OnCheckGibUserOperationCompleted(object arg) {
            if ((this.CheckGibUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckGibUserCompleted(this, new CheckGibUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetMailStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetMailStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")] out MailStatusResult[] emailResult) {
            object[] results = this.Invoke("GetMailStatus", new object[] {
                        sessionID,
                        paramList});
            emailResult = ((MailStatusResult[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetMailStatusAsync(string sessionID, string[] paramList) {
            this.GetMailStatusAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetMailStatusAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetMailStatusOperationCompleted == null)) {
                this.GetMailStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailStatusOperationCompleted);
            }
            this.InvokeAsync("GetMailStatus", new object[] {
                        sessionID,
                        paramList}, this.GetMailStatusOperationCompleted, userState);
        }
        
        private void OnGetMailStatusOperationCompleted(object arg) {
            if ((this.GetMailStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMailStatusCompleted(this, new GetMailStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/Get2FACode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType Get2FACode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string phone) {
            object[] results = this.Invoke("Get2FACode", new object[] {
                        sessionID,
                        phone});
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void Get2FACodeAsync(string sessionID, string phone) {
            this.Get2FACodeAsync(sessionID, phone, null);
        }
        
        /// <remarks/>
        public void Get2FACodeAsync(string sessionID, string phone, object userState) {
            if ((this.Get2FACodeOperationCompleted == null)) {
                this.Get2FACodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet2FACodeOperationCompleted);
            }
            this.InvokeAsync("Get2FACode", new object[] {
                        sessionID,
                        phone}, this.Get2FACodeOperationCompleted, userState);
        }
        
        private void OnGet2FACodeOperationCompleted(object arg) {
            if ((this.Get2FACodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get2FACodeCompleted(this, new Get2FACodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/Get5K30KCancelObjectionStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType Get5K30KCancelObjectionStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid) {
            object[] results = this.Invoke("Get5K30KCancelObjectionStatus", new object[] {
                        sessionID,
                        uuid});
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void Get5K30KCancelObjectionStatusAsync(string sessionID, string uuid) {
            this.Get5K30KCancelObjectionStatusAsync(sessionID, uuid, null);
        }
        
        /// <remarks/>
        public void Get5K30KCancelObjectionStatusAsync(string sessionID, string uuid, object userState) {
            if ((this.Get5K30KCancelObjectionStatusOperationCompleted == null)) {
                this.Get5K30KCancelObjectionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet5K30KCancelObjectionStatusOperationCompleted);
            }
            this.InvokeAsync("Get5K30KCancelObjectionStatus", new object[] {
                        sessionID,
                        uuid}, this.Get5K30KCancelObjectionStatusOperationCompleted, userState);
        }
        
        private void OnGet5K30KCancelObjectionStatusOperationCompleted(object arg) {
            if ((this.Get5K30KCancelObjectionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get5K30KCancelObjectionStatusCompleted(this, new Get5K30KCancelObjectionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetUserAccountServicesByVknTckn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetUserAccountServicesByVknTckn([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string vknTckn, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService.Model")] out UserAccountServiceList[] resultList) {
            object[] results = this.Invoke("GetUserAccountServicesByVknTckn", new object[] {
                        sessionID,
                        vknTckn});
            resultList = ((UserAccountServiceList[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAccountServicesByVknTcknAsync(string sessionID, string vknTckn) {
            this.GetUserAccountServicesByVknTcknAsync(sessionID, vknTckn, null);
        }
        
        /// <remarks/>
        public void GetUserAccountServicesByVknTcknAsync(string sessionID, string vknTckn, object userState) {
            if ((this.GetUserAccountServicesByVknTcknOperationCompleted == null)) {
                this.GetUserAccountServicesByVknTcknOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserAccountServicesByVknTcknOperationCompleted);
            }
            this.InvokeAsync("GetUserAccountServicesByVknTckn", new object[] {
                        sessionID,
                        vknTckn}, this.GetUserAccountServicesByVknTcknOperationCompleted, userState);
        }
        
        private void OnGetUserAccountServicesByVknTcknOperationCompleted(object arg) {
            if ((this.GetUserAccountServicesByVknTcknCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserAccountServicesByVknTcknCompleted(this, new GetUserAccountServicesByVknTcknCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/MarkAsUnreceived", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType MarkAsUnreceived([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uuid, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList) {
            object[] results = this.Invoke("MarkAsUnreceived", new object[] {
                        sessionID,
                        uuid,
                        paramList});
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void MarkAsUnreceivedAsync(string sessionID, string uuid, string[] paramList) {
            this.MarkAsUnreceivedAsync(sessionID, uuid, paramList, null);
        }
        
        /// <remarks/>
        public void MarkAsUnreceivedAsync(string sessionID, string uuid, string[] paramList, object userState) {
            if ((this.MarkAsUnreceivedOperationCompleted == null)) {
                this.MarkAsUnreceivedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkAsUnreceivedOperationCompleted);
            }
            this.InvokeAsync("MarkAsUnreceived", new object[] {
                        sessionID,
                        uuid,
                        paramList}, this.MarkAsUnreceivedOperationCompleted, userState);
        }
        
        private void OnMarkAsUnreceivedOperationCompleted(object arg) {
            if ((this.MarkAsUnreceivedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkAsUnreceivedCompleted(this, new MarkAsUnreceivedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetDocumentListWithDepartment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetDocumentListWithDepartment([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")] out Document[] docList) {
            object[] results = this.Invoke("GetDocumentListWithDepartment", new object[] {
                        sessionID,
                        paramList});
            docList = ((Document[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListWithDepartmentAsync(string sessionID, string[] paramList) {
            this.GetDocumentListWithDepartmentAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetDocumentListWithDepartmentAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetDocumentListWithDepartmentOperationCompleted == null)) {
                this.GetDocumentListWithDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListWithDepartmentOperationCompleted);
            }
            this.InvokeAsync("GetDocumentListWithDepartment", new object[] {
                        sessionID,
                        paramList}, this.GetDocumentListWithDepartmentOperationCompleted, userState);
        }
        
        private void OnGetDocumentListWithDepartmentOperationCompleted(object arg) {
            if ((this.GetDocumentListWithDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListWithDepartmentCompleted(this, new GetDocumentListWithDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetPrefixLastNumberList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetPrefixLastNumberList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")] out PrefixLastNumber[] resultList) {
            object[] results = this.Invoke("GetPrefixLastNumberList", new object[] {
                        sessionID,
                        paramList});
            resultList = ((PrefixLastNumber[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrefixLastNumberListAsync(string sessionID, string[] paramList) {
            this.GetPrefixLastNumberListAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void GetPrefixLastNumberListAsync(string sessionID, string[] paramList, object userState) {
            if ((this.GetPrefixLastNumberListOperationCompleted == null)) {
                this.GetPrefixLastNumberListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrefixLastNumberListOperationCompleted);
            }
            this.InvokeAsync("GetPrefixLastNumberList", new object[] {
                        sessionID,
                        paramList}, this.GetPrefixLastNumberListOperationCompleted, userState);
        }
        
        private void OnGetPrefixLastNumberListOperationCompleted(object arg) {
            if ((this.GetPrefixLastNumberListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrefixLastNumberListCompleted(this, new GetPrefixLastNumberListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/ActivateVUK507Services", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType ActivateVUK507Services([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] paramList, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService.Model")] out ServiceActivationResult[] resultList) {
            object[] results = this.Invoke("ActivateVUK507Services", new object[] {
                        sessionID,
                        paramList});
            resultList = ((ServiceActivationResult[])(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateVUK507ServicesAsync(string sessionID, string[] paramList) {
            this.ActivateVUK507ServicesAsync(sessionID, paramList, null);
        }
        
        /// <remarks/>
        public void ActivateVUK507ServicesAsync(string sessionID, string[] paramList, object userState) {
            if ((this.ActivateVUK507ServicesOperationCompleted == null)) {
                this.ActivateVUK507ServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateVUK507ServicesOperationCompleted);
            }
            this.InvokeAsync("ActivateVUK507Services", new object[] {
                        sessionID,
                        paramList}, this.ActivateVUK507ServicesOperationCompleted, userState);
        }
        
        private void OnActivateVUK507ServicesOperationCompleted(object arg) {
            if ((this.ActivateVUK507ServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateVUK507ServicesCompleted(this, new ActivateVUK507ServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IPostBoxService/GetReceiverInfoFromTurmob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public eFaturaWebServiceResultType GetReceiverInfoFromTurmob([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string vknTckn, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out TurmobResponseModel turmobResponse) {
            object[] results = this.Invoke("GetReceiverInfoFromTurmob", new object[] {
                        sessionID,
                        vknTckn,
                        token});
            turmobResponse = ((TurmobResponseModel)(results[1]));
            return ((eFaturaWebServiceResultType)(results[0]));
        }
        
        /// <remarks/>
        public void GetReceiverInfoFromTurmobAsync(string sessionID, string vknTckn, string token) {
            this.GetReceiverInfoFromTurmobAsync(sessionID, vknTckn, token, null);
        }
        
        /// <remarks/>
        public void GetReceiverInfoFromTurmobAsync(string sessionID, string vknTckn, string token, object userState) {
            if ((this.GetReceiverInfoFromTurmobOperationCompleted == null)) {
                this.GetReceiverInfoFromTurmobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReceiverInfoFromTurmobOperationCompleted);
            }
            this.InvokeAsync("GetReceiverInfoFromTurmob", new object[] {
                        sessionID,
                        vknTckn,
                        token}, this.GetReceiverInfoFromTurmobOperationCompleted, userState);
        }
        
        private void OnGetReceiverInfoFromTurmobOperationCompleted(object arg) {
            if ((this.GetReceiverInfoFromTurmobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReceiverInfoFromTurmobCompleted(this, new GetReceiverInfoFromTurmobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eLogo.Core.SharedApi.Model")]
    public partial class ServiceVersionResult {
        
        private string apiVersionField;
        
        private string releaseVersionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ApiVersion {
            get {
                return this.apiVersionField;
            }
            set {
                this.apiVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ReleaseVersion {
            get {
                return this.releaseVersionField;
            }
            set {
                this.releaseVersionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class TurmobMessageModel {
        
        private string codeField;
        
        private string messageField;
        
        private string typeField;
        
        private string uIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UId {
            get {
                return this.uIdField;
            }
            set {
                this.uIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class TurmobAceActivityInfo {
        
        private string faaliyetAdiField;
        
        private string faaliyetKoduField;
        
        private string siraField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string faaliyetAdi {
            get {
                return this.faaliyetAdiField;
            }
            set {
                this.faaliyetAdiField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string faaliyetKodu {
            get {
                return this.faaliyetKoduField;
            }
            set {
                this.faaliyetKoduField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string sira {
            get {
                return this.siraField;
            }
            set {
                this.siraField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class TurmobStatus {
        
        private string durumKodAciklamasiField;
        
        private int durumKoduField;
        
        private bool durumKoduFieldSpecified;
        
        private string hataDetayBilgisiField;
        
        private bool sonucField;
        
        private bool sonucFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string durumKodAciklamasi {
            get {
                return this.durumKodAciklamasiField;
            }
            set {
                this.durumKodAciklamasiField = value;
            }
        }
        
        /// <remarks/>
        public int durumKodu {
            get {
                return this.durumKoduField;
            }
            set {
                this.durumKoduField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool durumKoduSpecified {
            get {
                return this.durumKoduFieldSpecified;
            }
            set {
                this.durumKoduFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string hataDetayBilgisi {
            get {
                return this.hataDetayBilgisiField;
            }
            set {
                this.hataDetayBilgisiField = value;
            }
        }
        
        /// <remarks/>
        public bool sonuc {
            get {
                return this.sonucField;
            }
            set {
                this.sonucField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sonucSpecified {
            get {
                return this.sonucFieldSpecified;
            }
            set {
                this.sonucFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class TurmobAddressInfo {
        
        private string adresTipiField;
        
        private string adresTipiAciklamasiField;
        
        private string beldeBucakField;
        
        private string caddeSokakField;
        
        private string disKapiNoField;
        
        private string icKapiNoField;
        
        private string ilAdiField;
        
        private string ilKoduField;
        
        private string ilceAdiField;
        
        private string ilceKoduField;
        
        private string koyField;
        
        private string mahalleSemtField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string adresTipi {
            get {
                return this.adresTipiField;
            }
            set {
                this.adresTipiField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string adresTipiAciklamasi {
            get {
                return this.adresTipiAciklamasiField;
            }
            set {
                this.adresTipiAciklamasiField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string beldeBucak {
            get {
                return this.beldeBucakField;
            }
            set {
                this.beldeBucakField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string caddeSokak {
            get {
                return this.caddeSokakField;
            }
            set {
                this.caddeSokakField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string disKapiNo {
            get {
                return this.disKapiNoField;
            }
            set {
                this.disKapiNoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string icKapiNo {
            get {
                return this.icKapiNoField;
            }
            set {
                this.icKapiNoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ilAdi {
            get {
                return this.ilAdiField;
            }
            set {
                this.ilAdiField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ilKodu {
            get {
                return this.ilKoduField;
            }
            set {
                this.ilKoduField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ilceAdi {
            get {
                return this.ilceAdiField;
            }
            set {
                this.ilceAdiField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ilceKodu {
            get {
                return this.ilceKoduField;
            }
            set {
                this.ilceKoduField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string koy {
            get {
                return this.koyField;
            }
            set {
                this.koyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string mahalleSemt {
            get {
                return this.mahalleSemtField;
            }
            set {
                this.mahalleSemtField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class TurmobDataModel {
        
        private string adField;
        
        private TurmobAddressInfo[] adresBilgileriField;
        
        private string babaAdiField;
        
        private string dogumYeriField;
        
        private TurmobStatus durumField;
        
        private string faalTerkDurumuField;
        
        private string iseBaslamaTarihiField;
        
        private string isiBirakmaTarihiField;
        
        private string kimlikPotansiyelField;
        
        private string kimlikUnvaniField;
        
        private string kurulusTarihiField;
        
        private TurmobAceActivityInfo[] nACEFaaliyetKoduveTanimiField;
        
        private string sirketinTuruField;
        
        private string soyadField;
        
        private string tamDarMukellefiyetField;
        
        private string tcknField;
        
        private string unvanField;
        
        private string vergiDairesiAdiField;
        
        private string vergiDairesiKoduField;
        
        private string vknField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ad {
            get {
                return this.adField;
            }
            set {
                this.adField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public TurmobAddressInfo[] adresBilgileri {
            get {
                return this.adresBilgileriField;
            }
            set {
                this.adresBilgileriField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string babaAdi {
            get {
                return this.babaAdiField;
            }
            set {
                this.babaAdiField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string dogumYeri {
            get {
                return this.dogumYeriField;
            }
            set {
                this.dogumYeriField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public TurmobStatus durum {
            get {
                return this.durumField;
            }
            set {
                this.durumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string faalTerkDurumu {
            get {
                return this.faalTerkDurumuField;
            }
            set {
                this.faalTerkDurumuField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string iseBaslamaTarihi {
            get {
                return this.iseBaslamaTarihiField;
            }
            set {
                this.iseBaslamaTarihiField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string isiBirakmaTarihi {
            get {
                return this.isiBirakmaTarihiField;
            }
            set {
                this.isiBirakmaTarihiField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string kimlikPotansiyel {
            get {
                return this.kimlikPotansiyelField;
            }
            set {
                this.kimlikPotansiyelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string kimlikUnvani {
            get {
                return this.kimlikUnvaniField;
            }
            set {
                this.kimlikUnvaniField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string kurulusTarihi {
            get {
                return this.kurulusTarihiField;
            }
            set {
                this.kurulusTarihiField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public TurmobAceActivityInfo[] nACEFaaliyetKoduveTanimi {
            get {
                return this.nACEFaaliyetKoduveTanimiField;
            }
            set {
                this.nACEFaaliyetKoduveTanimiField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string sirketinTuru {
            get {
                return this.sirketinTuruField;
            }
            set {
                this.sirketinTuruField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string soyad {
            get {
                return this.soyadField;
            }
            set {
                this.soyadField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string tamDarMukellefiyet {
            get {
                return this.tamDarMukellefiyetField;
            }
            set {
                this.tamDarMukellefiyetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string tckn {
            get {
                return this.tcknField;
            }
            set {
                this.tcknField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string unvan {
            get {
                return this.unvanField;
            }
            set {
                this.unvanField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string vergiDairesiAdi {
            get {
                return this.vergiDairesiAdiField;
            }
            set {
                this.vergiDairesiAdiField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string vergiDairesiKodu {
            get {
                return this.vergiDairesiKoduField;
            }
            set {
                this.vergiDairesiKoduField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string vkn {
            get {
                return this.vknField;
            }
            set {
                this.vknField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class TurmobResponseModel {
        
        private TurmobDataModel dataField;
        
        private TurmobMessageModel[] messageField;
        
        private bool successField;
        
        private bool successFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public TurmobDataModel Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public TurmobMessageModel[] Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SuccessSpecified {
            get {
                return this.successFieldSpecified;
            }
            set {
                this.successFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService.Model")]
    public partial class ServiceActivationResult {
        
        private string messageField;
        
        private int serviceCodeField;
        
        private bool serviceCodeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public int ServiceCode {
            get {
                return this.serviceCodeField;
            }
            set {
                this.serviceCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceCodeSpecified {
            get {
                return this.serviceCodeFieldSpecified;
            }
            set {
                this.serviceCodeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class PrefixLastNumber {
        
        private int counterField;
        
        private bool counterFieldSpecified;
        
        private string invoicePrefixField;
        
        private int typeField;
        
        private bool typeFieldSpecified;
        
        /// <remarks/>
        public int Counter {
            get {
                return this.counterField;
            }
            set {
                this.counterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CounterSpecified {
            get {
                return this.counterFieldSpecified;
            }
            set {
                this.counterFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InvoicePrefix {
            get {
                return this.invoicePrefixField;
            }
            set {
                this.invoicePrefixField = value;
            }
        }
        
        /// <remarks/>
        public int Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService.Model")]
    public partial class UserAccountServiceInfo {
        
        private System.Nullable<System.DateTime> activateDateField;
        
        private bool activateDateFieldSpecified;
        
        private int serviceCodeField;
        
        private bool serviceCodeFieldSpecified;
        
        private string serviceNameField;
        
        private string serviceStatusField;
        
        private string statusDescriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ActivateDate {
            get {
                return this.activateDateField;
            }
            set {
                this.activateDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ActivateDateSpecified {
            get {
                return this.activateDateFieldSpecified;
            }
            set {
                this.activateDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int ServiceCode {
            get {
                return this.serviceCodeField;
            }
            set {
                this.serviceCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceCodeSpecified {
            get {
                return this.serviceCodeFieldSpecified;
            }
            set {
                this.serviceCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceName {
            get {
                return this.serviceNameField;
            }
            set {
                this.serviceNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceStatus {
            get {
                return this.serviceStatusField;
            }
            set {
                this.serviceStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StatusDescription {
            get {
                return this.statusDescriptionField;
            }
            set {
                this.statusDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService.Model")]
    public partial class UserAccountServiceList {
        
        private string accountNameField;
        
        private string formattedNameField;
        
        private UserAccountServiceInfo[] servicesField;
        
        private string vknTcknField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AccountName {
            get {
                return this.accountNameField;
            }
            set {
                this.accountNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FormattedName {
            get {
                return this.formattedNameField;
            }
            set {
                this.formattedNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public UserAccountServiceInfo[] Services {
            get {
                return this.servicesField;
            }
            set {
                this.servicesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string VknTckn {
            get {
                return this.vknTcknField;
            }
            set {
                this.vknTcknField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class MailStatusDetail {
        
        private string descriptionField;
        
        private string eMailField;
        
        private int statusField;
        
        private bool statusFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EMail {
            get {
                return this.eMailField;
            }
            set {
                this.eMailField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StatusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class MailStatusResult {
        
        private MailStatusDetail[] mailStatusDetailListField;
        
        private string uuidField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public MailStatusDetail[] MailStatusDetailList {
            get {
                return this.mailStatusDetailListField;
            }
            set {
                this.mailStatusDetailListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public partial class GibUserInfoType {
        
        private string aliasField;
        
        private System.Nullable<System.DateTime> aliasRegisterTimeField;
        
        private bool aliasRegisterTimeFieldSpecified;
        
        private System.Nullable<System.DateTime> firstCreationTimeField;
        
        private bool firstCreationTimeFieldSpecified;
        
        private string identifierField;
        
        private string titleField;
        
        private string typeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> AliasRegisterTime {
            get {
                return this.aliasRegisterTimeField;
            }
            set {
                this.aliasRegisterTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AliasRegisterTimeSpecified {
            get {
                return this.aliasRegisterTimeFieldSpecified;
            }
            set {
                this.aliasRegisterTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> FirstCreationTime {
            get {
                return this.firstCreationTimeField;
            }
            set {
                this.firstCreationTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FirstCreationTimeSpecified {
            get {
                return this.firstCreationTimeFieldSpecified;
            }
            set {
                this.firstCreationTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public partial class GibUserType {
        
        private int despatchAdviceField;
        
        private bool despatchAdviceFieldSpecified;
        
        private GibUserInfoType[] despatchAdviceGbListField;
        
        private GibUserInfoType[] despatchAdvicePkListField;
        
        private string identifierField;
        
        private int invoiceField;
        
        private bool invoiceFieldSpecified;
        
        private GibUserInfoType[] invoiceGbListField;
        
        private GibUserInfoType[] invoicePkListField;
        
        /// <remarks/>
        public int DespatchAdvice {
            get {
                return this.despatchAdviceField;
            }
            set {
                this.despatchAdviceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DespatchAdviceSpecified {
            get {
                return this.despatchAdviceFieldSpecified;
            }
            set {
                this.despatchAdviceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public GibUserInfoType[] DespatchAdviceGbList {
            get {
                return this.despatchAdviceGbListField;
            }
            set {
                this.despatchAdviceGbListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public GibUserInfoType[] DespatchAdvicePkList {
            get {
                return this.despatchAdvicePkListField;
            }
            set {
                this.despatchAdvicePkListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        public int Invoice {
            get {
                return this.invoiceField;
            }
            set {
                this.invoiceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvoiceSpecified {
            get {
                return this.invoiceFieldSpecified;
            }
            set {
                this.invoiceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public GibUserInfoType[] InvoiceGbList {
            get {
                return this.invoiceGbListField;
            }
            set {
                this.invoiceGbListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public GibUserInfoType[] InvoicePkList {
            get {
                return this.invoicePkListField;
            }
            set {
                this.invoicePkListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class Tax {
        
        private double taxRateField;
        
        private bool taxRateFieldSpecified;
        
        private double taxValueField;
        
        private bool taxValueFieldSpecified;
        
        /// <remarks/>
        public double TaxRate {
            get {
                return this.taxRateField;
            }
            set {
                this.taxRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TaxRateSpecified {
            get {
                return this.taxRateFieldSpecified;
            }
            set {
                this.taxRateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double TaxValue {
            get {
                return this.taxValueField;
            }
            set {
                this.taxValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TaxValueSpecified {
            get {
                return this.taxValueFieldSpecified;
            }
            set {
                this.taxValueFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public partial class DocInfo {
        
        private string amountCurrencyField;
        
        private string elementIdField;
        
        private System.Nullable<System.DateTime> issueDateField;
        
        private bool issueDateFieldSpecified;
        
        private Tax[] taxesField;
        
        private double totalAmountField;
        
        private bool totalAmountFieldSpecified;
        
        private int isCancelField;
        
        private bool isCancelFieldSpecified;
        
        private int isObjectionField;
        
        private bool isObjectionFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AmountCurrency {
            get {
                return this.amountCurrencyField;
            }
            set {
                this.amountCurrencyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ElementId {
            get {
                return this.elementIdField;
            }
            set {
                this.elementIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> IssueDate {
            get {
                return this.issueDateField;
            }
            set {
                this.issueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IssueDateSpecified {
            get {
                return this.issueDateFieldSpecified;
            }
            set {
                this.issueDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
        public Tax[] Taxes {
            get {
                return this.taxesField;
            }
            set {
                this.taxesField = value;
            }
        }
        
        /// <remarks/>
        public double TotalAmount {
            get {
                return this.totalAmountField;
            }
            set {
                this.totalAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalAmountSpecified {
            get {
                return this.totalAmountFieldSpecified;
            }
            set {
                this.totalAmountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int isCancel {
            get {
                return this.isCancelField;
            }
            set {
                this.isCancelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isCancelSpecified {
            get {
                return this.isCancelFieldSpecified;
            }
            set {
                this.isCancelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int isObjection {
            get {
                return this.isObjectionField;
            }
            set {
                this.isObjectionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isObjectionSpecified {
            get {
                return this.isObjectionFieldSpecified;
            }
            set {
                this.isObjectionFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public partial class Report {
        
        private int cancelInvoiceCountField;
        
        private bool cancelInvoiceCountFieldSpecified;
        
        private string cancelTotalAmountField;
        
        private int docCountField;
        
        private bool docCountFieldSpecified;
        
        private System.Nullable<System.DateTime> reportCreateDateField;
        
        private bool reportCreateDateFieldSpecified;
        
        private System.Nullable<System.DateTime> reportDateField;
        
        private bool reportDateFieldSpecified;
        
        private string reportIdField;
        
        private string reportResponseCodeField;
        
        private string reportStatusField;
        
        private string statusDescriptionField;
        
        private string totalAmountField;
        
        private int versionField;
        
        private bool versionFieldSpecified;
        
        private DocInfo[] docInfoField;
        
        /// <remarks/>
        public int CancelInvoiceCount {
            get {
                return this.cancelInvoiceCountField;
            }
            set {
                this.cancelInvoiceCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CancelInvoiceCountSpecified {
            get {
                return this.cancelInvoiceCountFieldSpecified;
            }
            set {
                this.cancelInvoiceCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CancelTotalAmount {
            get {
                return this.cancelTotalAmountField;
            }
            set {
                this.cancelTotalAmountField = value;
            }
        }
        
        /// <remarks/>
        public int DocCount {
            get {
                return this.docCountField;
            }
            set {
                this.docCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DocCountSpecified {
            get {
                return this.docCountFieldSpecified;
            }
            set {
                this.docCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ReportCreateDate {
            get {
                return this.reportCreateDateField;
            }
            set {
                this.reportCreateDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReportCreateDateSpecified {
            get {
                return this.reportCreateDateFieldSpecified;
            }
            set {
                this.reportCreateDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ReportDate {
            get {
                return this.reportDateField;
            }
            set {
                this.reportDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReportDateSpecified {
            get {
                return this.reportDateFieldSpecified;
            }
            set {
                this.reportDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ReportId {
            get {
                return this.reportIdField;
            }
            set {
                this.reportIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ReportResponseCode {
            get {
                return this.reportResponseCodeField;
            }
            set {
                this.reportResponseCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ReportStatus {
            get {
                return this.reportStatusField;
            }
            set {
                this.reportStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StatusDescription {
            get {
                return this.statusDescriptionField;
            }
            set {
                this.statusDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TotalAmount {
            get {
                return this.totalAmountField;
            }
            set {
                this.totalAmountField = value;
            }
        }
        
        /// <remarks/>
        public int Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VersionSpecified {
            get {
                return this.versionFieldSpecified;
            }
            set {
                this.versionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public DocInfo[] docInfo {
            get {
                return this.docInfoField;
            }
            set {
                this.docInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public partial class Document {
        
        private string[] docInfoField;
        
        private string documentIdField;
        
        private string documentJSonField;
        
        private string documentUuidField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] docInfo {
            get {
                return this.docInfoField;
            }
            set {
                this.docInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string documentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string documentJSon {
            get {
                return this.documentJSonField;
            }
            set {
                this.documentJSonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string documentUuid {
            get {
                return this.documentUuidField;
            }
            set {
                this.documentUuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class StatusDetail {
        
        private string elementIdField;
        
        private string respCodeField;
        
        private string respDescriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ElementId {
            get {
                return this.elementIdField;
            }
            set {
                this.elementIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string RespCode {
            get {
                return this.respCodeField;
            }
            set {
                this.respCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string RespDescription {
            get {
                return this.respDescriptionField;
            }
            set {
                this.respDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Model")]
    public partial class DocumentStatusBatchType {
        
        private string aliasField;
        
        private int codeField;
        
        private bool codeFieldSpecified;
        
        private System.Nullable<System.DateTime> currentDateField;
        
        private bool currentDateFieldSpecified;
        
        private string descriptionField;
        
        private string envelopeIdField;
        
        private bool isCancelField;
        
        private bool isCancelFieldSpecified;
        
        private int statusField;
        
        private bool statusFieldSpecified;
        
        private StatusDetail statusDetailField;
        
        private string uuidField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        /// <remarks/>
        public int code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool codeSpecified {
            get {
                return this.codeFieldSpecified;
            }
            set {
                this.codeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> currentDate {
            get {
                return this.currentDateField;
            }
            set {
                this.currentDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool currentDateSpecified {
            get {
                return this.currentDateFieldSpecified;
            }
            set {
                this.currentDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string envelopeId {
            get {
                return this.envelopeIdField;
            }
            set {
                this.envelopeIdField = value;
            }
        }
        
        /// <remarks/>
        public bool isCancel {
            get {
                return this.isCancelField;
            }
            set {
                this.isCancelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isCancelSpecified {
            get {
                return this.isCancelFieldSpecified;
            }
            set {
                this.isCancelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public StatusDetail statusDetail {
            get {
                return this.statusDetailField;
            }
            set {
                this.statusDetailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public partial class DocumentStatusType {
        
        private int codeField;
        
        private bool codeFieldSpecified;
        
        private System.DateTime currentDateField;
        
        private bool currentDateFieldSpecified;
        
        private string descriptionField;
        
        private string envelopeIdField;
        
        private bool isCancelField;
        
        private bool isCancelFieldSpecified;
        
        private int statusField;
        
        private bool statusFieldSpecified;
        
        private string[] statusDetailField;
        
        /// <remarks/>
        public int code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool codeSpecified {
            get {
                return this.codeFieldSpecified;
            }
            set {
                this.codeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime currentDate {
            get {
                return this.currentDateField;
            }
            set {
                this.currentDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool currentDateSpecified {
            get {
                return this.currentDateFieldSpecified;
            }
            set {
                this.currentDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string envelopeId {
            get {
                return this.envelopeIdField;
            }
            set {
                this.envelopeIdField = value;
            }
        }
        
        /// <remarks/>
        public bool isCancel {
            get {
                return this.isCancelField;
            }
            set {
                this.isCancelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isCancelSpecified {
            get {
                return this.isCancelFieldSpecified;
            }
            set {
                this.isCancelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] statusDetail {
            get {
                return this.statusDetailField;
            }
            set {
                this.statusDetailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="eFaturaWebService.ResultType", Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public partial class eFaturaWebServiceResultType {
        
        private int errorCodeField;
        
        private bool errorCodeFieldSpecified;
        
        private string[] outputListField;
        
        private int resultCodeField;
        
        private bool resultCodeFieldSpecified;
        
        private string resultMsgField;
        
        private int successCodeField;
        
        private bool successCodeFieldSpecified;
        
        private string successMsgField;
        
        /// <remarks/>
        public int errorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool errorCodeSpecified {
            get {
                return this.errorCodeFieldSpecified;
            }
            set {
                this.errorCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] outputList {
            get {
                return this.outputListField;
            }
            set {
                this.outputListField = value;
            }
        }
        
        /// <remarks/>
        public int resultCode {
            get {
                return this.resultCodeField;
            }
            set {
                this.resultCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resultCodeSpecified {
            get {
                return this.resultCodeFieldSpecified;
            }
            set {
                this.resultCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string resultMsg {
            get {
                return this.resultMsgField;
            }
            set {
                this.resultMsgField = value;
            }
        }
        
        /// <remarks/>
        public int successCode {
            get {
                return this.successCodeField;
            }
            set {
                this.successCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool successCodeSpecified {
            get {
                return this.successCodeFieldSpecified;
            }
            set {
                this.successCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string successMsg {
            get {
                return this.successMsgField;
            }
            set {
                this.successMsgField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib")]
    public partial class ReconInvoiceType {
        
        private bool cancelField;
        
        private bool cancelFieldSpecified;
        
        private System.DateTime invoiceDateField;
        
        private bool invoiceDateFieldSpecified;
        
        private string invoiceNumberField;
        
        private System.Nullable<EArchiveInvoiceStatusForRecon> invoiceStatusField;
        
        private bool invoiceStatusFieldSpecified;
        
        private string uuidField;
        
        /// <remarks/>
        public bool Cancel {
            get {
                return this.cancelField;
            }
            set {
                this.cancelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CancelSpecified {
            get {
                return this.cancelFieldSpecified;
            }
            set {
                this.cancelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime InvoiceDate {
            get {
                return this.invoiceDateField;
            }
            set {
                this.invoiceDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvoiceDateSpecified {
            get {
                return this.invoiceDateFieldSpecified;
            }
            set {
                this.invoiceDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InvoiceNumber {
            get {
                return this.invoiceNumberField;
            }
            set {
                this.invoiceNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<EArchiveInvoiceStatusForRecon> InvoiceStatus {
            get {
                return this.invoiceStatusField;
            }
            set {
                this.invoiceStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvoiceStatusSpecified {
            get {
                return this.invoiceStatusFieldSpecified;
            }
            set {
                this.invoiceStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eLogo.eFatura.Common.Enums")]
    public enum EArchiveInvoiceStatusForRecon {
        
        /// <remarks/>
        SUCCESS,
        
        /// <remarks/>
        FAULT,
        
        /// <remarks/>
        QUEUE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public partial class ElementType {
        
        private base64BinaryData binaryDataField;
        
        private System.DateTime currentDateField;
        
        private bool currentDateFieldSpecified;
        
        private string envelopeIdField;
        
        private string fileNameField;
        
        private string gbLabelField;
        
        private string hashField;
        
        private string pkLabelField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public base64BinaryData binaryData {
            get {
                return this.binaryDataField;
            }
            set {
                this.binaryDataField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime currentDate {
            get {
                return this.currentDateField;
            }
            set {
                this.currentDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool currentDateSpecified {
            get {
                return this.currentDateFieldSpecified;
            }
            set {
                this.currentDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string envelopeId {
            get {
                return this.envelopeIdField;
            }
            set {
                this.envelopeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string gbLabel {
            get {
                return this.gbLabelField;
            }
            set {
                this.gbLabelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string hash {
            get {
                return this.hashField;
            }
            set {
                this.hashField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string pkLabel {
            get {
                return this.pkLabelField;
            }
            set {
                this.pkLabelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public partial class base64BinaryData {
        
        private byte[] valueField;
        
        private string contentTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string contentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public partial class DocumentType {
        
        private base64BinaryData binaryDataField;
        
        private System.DateTime currentDateField;
        
        private bool currentDateFieldSpecified;
        
        private string fileNameField;
        
        private string hashField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public base64BinaryData binaryData {
            get {
                return this.binaryDataField;
            }
            set {
                this.binaryDataField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime currentDate {
            get {
                return this.currentDateField;
            }
            set {
                this.currentDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool currentDateSpecified {
            get {
                return this.currentDateFieldSpecified;
            }
            set {
                this.currentDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string hash {
            get {
                return this.hashField;
            }
            set {
                this.hashField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public partial class LoginType {
        
        private string appStrField;
        
        private string passWordField;
        
        private string sourceField;
        
        private string userNameField;
        
        private string versionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string appStr {
            get {
                return this.appStrField;
            }
            set {
                this.appStrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string passWord {
            get {
                return this.passWordField;
            }
            set {
                this.passWordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="NAF.Diagnostics")]
    public partial class DiagnosticException {
        
        private string messageField;
        
        private string[] stackField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] stack {
            get {
                return this.stackField;
            }
            set {
                this.stackField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="NAF.Diagnostics")]
    public partial class DiagnosticResult {
        
        private DiagnosticException exceptionField;
        
        private bool mustField;
        
        private bool mustFieldSpecified;
        
        private string nameField;
        
        private DiagnosticParameter[] parametersField;
        
        private string stateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DiagnosticException exception {
            get {
                return this.exceptionField;
            }
            set {
                this.exceptionField = value;
            }
        }
        
        /// <remarks/>
        public bool must {
            get {
                return this.mustField;
            }
            set {
                this.mustField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mustSpecified {
            get {
                return this.mustFieldSpecified;
            }
            set {
                this.mustFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public DiagnosticParameter[] parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="NAF.Diagnostics")]
    public partial class DiagnosticParameter {
        
        private DiagnosticResult[] resultsField;
        
        private string stateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public DiagnosticResult[] results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaCoreLib.Common")]
    public enum EArchiveDocumentTypes {
        
        /// <remarks/>
        INVOICE,
        
        /// <remarks/>
        REPORT,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Helpers")]
    public enum InvoiceStatus {
        
        /// <remarks/>
        TEMP,
        
        /// <remarks/>
        SAVING,
        
        /// <remarks/>
        SAVEDATAERROR,
        
        /// <remarks/>
        PUSHQUEUEERROR,
        
        /// <remarks/>
        SUSPEND,
        
        /// <remarks/>
        DELETED,
        
        /// <remarks/>
        FAIL,
        
        /// <remarks/>
        RAW,
        
        /// <remarks/>
        PROCESSSED,
        
        /// <remarks/>
        SIGNED,
        
        /// <remarks/>
        ENVELOPED,
        
        /// <remarks/>
        EXTRACTED,
        
        /// <remarks/>
        UNRECEIVED,
        
        /// <remarks/>
        RECEIVED,
        
        /// <remarks/>
        ENVELOPING,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib.Helpers")]
    public enum AppRespStatus {
        
        /// <remarks/>
        TEMP,
        
        /// <remarks/>
        SAVEDATAERROR,
        
        /// <remarks/>
        PUSHQUEUEERROR,
        
        /// <remarks/>
        SUSPEND,
        
        /// <remarks/>
        DELETED,
        
        /// <remarks/>
        FAIL,
        
        /// <remarks/>
        RAW,
        
        /// <remarks/>
        PROCESSSED,
        
        /// <remarks/>
        SIGNED,
        
        /// <remarks/>
        ENVELOPED,
        
        /// <remarks/>
        EXTRACTED,
        
        /// <remarks/>
        UNRECEIVED,
        
        /// <remarks/>
        RECEIVED,
        
        /// <remarks/>
        ENVELOPING,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib")]
    public enum SendRecvType {
        
        /// <remarks/>
        SEND,
        
        /// <remarks/>
        RECV,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eLogo.eFatura.Common.Enums")]
    public enum PostBoxDateType {
        
        /// <remarks/>
        byCREATED,
        
        /// <remarks/>
        byENVELOPEDATE,
        
        /// <remarks/>
        byCURRENTDATE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaCoreLib.Common")]
    public enum InvoiceDateType {
        
        /// <remarks/>
        byCREATED,
        
        /// <remarks/>
        byISSUEDATE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eLogo.eFatura.Common.Enums")]
    public enum UserListType {
        
        /// <remarks/>
        GBLIST,
        
        /// <remarks/>
        PKLIST,
        
        /// <remarks/>
        LIST4760,
        
        /// <remarks/>
        LIST5015,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public enum GetDocumentType {
        
        /// <remarks/>
        EINVOICE,
        
        /// <remarks/>
        EARCHIVE,
        
        /// <remarks/>
        APPLICATIONRESPONSE,
        
        /// <remarks/>
        DESPATCHADVICE,
        
        /// <remarks/>
        PRODUCERRECEIPT,
        
        /// <remarks/>
        SELFEMPLOYMENTRECEIPT,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/eFaturaWebService")]
    public enum DocumentDataType {
        
        /// <remarks/>
        UBL,
        
        /// <remarks/>
        PDF,
        
        /// <remarks/>
        HTML,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/CommonLib")]
    public enum InvoiceType {
        
        /// <remarks/>
        EINVOICE,
        
        /// <remarks/>
        EARCHIVE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetVersionsCompletedEventHandler(object sender, GetVersionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServiceVersionResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServiceVersionResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetDiagnosisResultCompletedEventHandler(object sender, GetDiagnosisResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiagnosisResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiagnosisResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DiagnosticParameter Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DiagnosticParameter)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ALiveCompletedEventHandler(object sender, ALiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ALiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ALiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool LoginResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool LoginResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sessionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void LogoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void sendEnvelopeCompletedEventHandler(object sender, sendEnvelopeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendEnvelopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendEnvelopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool sendEnvelopeResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool sendEnvelopeResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void sendInvoiceCompletedEventHandler(object sender, sendInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool sendInvoiceResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool sendInvoiceResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void sendApplicationResponseCompletedEventHandler(object sender, sendApplicationResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendApplicationResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendApplicationResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool sendApplicationResponseResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool sendApplicationResponseResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void sendEnvelopeExCompletedEventHandler(object sender, sendEnvelopeExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendEnvelopeExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendEnvelopeExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long sendEnvelopeExResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool sendEnvelopeExResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void sendInvoiceExCompletedEventHandler(object sender, sendInvoiceExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendInvoiceExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendInvoiceExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long sendInvoiceExResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool sendInvoiceExResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void sendSignedInvoiceCompletedEventHandler(object sender, sendSignedInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSignedInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendSignedInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long sendSignedInvoiceResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool sendSignedInvoiceResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void sendApplicationResponseExCompletedEventHandler(object sender, sendApplicationResponseExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendApplicationResponseExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendApplicationResponseExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long sendApplicationResponseExResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool sendApplicationResponseExResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void sendEArchiveDocumentCompletedEventHandler(object sender, sendEArchiveDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendEArchiveDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendEArchiveDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long sendEArchiveDocumentResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool sendEArchiveDocumentResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void receiveDocumentCompletedEventHandler(object sender, receiveDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool receiveDocumentResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveDocumentResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DocumentType document {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void receiveDoneCompletedEventHandler(object sender, receiveDoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveDoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveDoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long receiveDoneResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveDoneResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void receiveInvoiceCompletedEventHandler(object sender, receiveInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool receiveInvoiceResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveInvoiceResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ElementType document {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ElementType)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void receiveInvoiceDoneCompletedEventHandler(object sender, receiveInvoiceDoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveInvoiceDoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveInvoiceDoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long receiveInvoiceDoneResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveInvoiceDoneResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void receiveApplicationResponseCompletedEventHandler(object sender, receiveApplicationResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveApplicationResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveApplicationResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool receiveApplicationResponseResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveApplicationResponseResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ElementType document {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ElementType)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void receiveApplicationResponseDoneCompletedEventHandler(object sender, receiveApplicationResponseDoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveApplicationResponseDoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveApplicationResponseDoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long receiveApplicationResponseDoneResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveApplicationResponseDoneResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getApplicationResponseCompletedEventHandler(object sender, getApplicationResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getApplicationResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getApplicationResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool getApplicationResponseResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool getApplicationResponseResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DocumentType document {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvoiceStatusCompletedEventHandler(object sender, getInvoiceStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvoiceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvoiceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool getInvoiceStatusResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool getInvoiceStatusResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public InvoiceStatus status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InvoiceStatus)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool statusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string statusDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string envelopeId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getAppRespStatusCompletedEventHandler(object sender, getAppRespStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAppRespStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAppRespStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool getAppRespStatusResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool getAppRespStatusResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public AppRespStatus status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AppRespStatus)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool statusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string statusDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string envelopeId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getEnvelopeListCompletedEventHandler(object sender, getEnvelopeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEnvelopeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEnvelopeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getEnvelopeCompletedEventHandler(object sender, getEnvelopeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEnvelopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEnvelopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvoiceListCompletedEventHandler(object sender, getInvoiceListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvoiceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvoiceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvoiceCompletedEventHandler(object sender, getInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getUserListCompletedEventHandler(object sender, getUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getUserListNewCompletedEventHandler(object sender, getUserListNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserListNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserListNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getApprovalFlowListCompletedEventHandler(object sender, getApprovalFlowListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getApprovalFlowListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getApprovalFlowListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool getApprovalFlowListResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool getApprovalFlowListResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DocumentType document {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void setApprovalFlowIdCompletedEventHandler(object sender, setApprovalFlowIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setApprovalFlowIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setApprovalFlowIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool setApprovalFlowIdResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool setApprovalFlowIdResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getApprovalFlowResCompletedEventHandler(object sender, getApprovalFlowResCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getApprovalFlowResCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getApprovalFlowResCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool getApprovalFlowResResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool getApprovalFlowResResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int flowRes {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool flowResSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int flowAction {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool flowActionSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getDocumentStatusCompletedEventHandler(object sender, getDocumentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int respStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool respStatusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int responseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool responseCodeSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string responseDesc {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string envelopeId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getDocumentStatusExCompletedEventHandler(object sender, getDocumentStatusExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentStatusExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentStatusExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int respStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool respStatusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int responseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool responseCodeSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string responseDesc {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string envelopeId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public System.DateTime currentDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public bool currentDateSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getEArchiveXsltCompletedEventHandler(object sender, getEArchiveXsltCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEArchiveXsltCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEArchiveXsltCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool getEArchiveXsltResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool getEArchiveXsltResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DocumentType document {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvoiceApplicationResponseCompletedEventHandler(object sender, getInvoiceApplicationResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvoiceApplicationResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvoiceApplicationResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int getInvoiceApplicationResponseResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool getInvoiceApplicationResponseResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvoiceResponseDataCompletedEventHandler(object sender, getInvoiceResponseDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvoiceResponseDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvoiceResponseDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool getInvoiceResponseDataResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool getInvoiceResponseDataResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DocumentType document {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void setApplicationResponseOptionCompletedEventHandler(object sender, setApplicationResponseOptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setApplicationResponseOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setApplicationResponseOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool setApplicationResponseOptionResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool setApplicationResponseOptionResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getEArchiveInvoicePdfDataCompletedEventHandler(object sender, getEArchiveInvoicePdfDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEArchiveInvoicePdfDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEArchiveInvoicePdfDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool getEArchiveInvoicePdfDataResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool getEArchiveInvoicePdfDataResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public byte[] pdfData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getDocumentDataCompletedEventHandler(object sender, getDocumentDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getReconciliationListCompletedEventHandler(object sender, getReconciliationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getReconciliationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getReconciliationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void sendReconciliationReportCompletedEventHandler(object sender, sendReconciliationReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendReconciliationReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendReconciliationReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int sendReconciliationReportResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool sendReconciliationReportResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void createElementIdCompletedEventHandler(object sender, createElementIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createElementIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createElementIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void cancelEArchiveInvoiceCompletedEventHandler(object sender, cancelEArchiveInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelEArchiveInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelEArchiveInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long cancelEArchiveInvoiceResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool cancelEArchiveInvoiceResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendEArchiveListForReconcilitionCompletedEventHandler(object sender, SendEArchiveListForReconcilitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEArchiveListForReconcilitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEArchiveListForReconcilitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int SendEArchiveListForReconcilitionResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SendEArchiveListForReconcilitionResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendDocumentCompletedEventHandler(object sender, SendDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long refId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool refIdSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetDocumentCompletedEventHandler(object sender, GetDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ElementType document {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ElementType)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetDocumentDoneCompletedEventHandler(object sender, GetDocumentDoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentDoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentDoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetDocumentStatusCompletedEventHandler(object sender, GetDocumentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public DocumentStatusType statusInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentStatusType)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetDocumentStatusBatchCompletedEventHandler(object sender, GetDocumentStatusBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentStatusBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentStatusBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public DocumentStatusBatchType[] statusInfoList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentStatusBatchType[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetDocumentDataCompletedEventHandler(object sender, GetDocumentDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public DocumentType document {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentType)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetDocumentListCompletedEventHandler(object sender, GetDocumentListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Document[] docList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Document[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetReportListCompletedEventHandler(object sender, GetReportListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Report[] reportList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Report[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetValidateGIBUserCompletedEventHandler(object sender, GetValidateGIBUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetValidateGIBUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetValidateGIBUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CheckGibUserCompletedEventHandler(object sender, CheckGibUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckGibUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckGibUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public GibUserType[] userList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GibUserType[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetMailStatusCompletedEventHandler(object sender, GetMailStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMailStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMailStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public MailStatusResult[] emailResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MailStatusResult[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void Get2FACodeCompletedEventHandler(object sender, Get2FACodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get2FACodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get2FACodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void Get5K30KCancelObjectionStatusCompletedEventHandler(object sender, Get5K30KCancelObjectionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get5K30KCancelObjectionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get5K30KCancelObjectionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetUserAccountServicesByVknTcknCompletedEventHandler(object sender, GetUserAccountServicesByVknTcknCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserAccountServicesByVknTcknCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserAccountServicesByVknTcknCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public UserAccountServiceList[] resultList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserAccountServiceList[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void MarkAsUnreceivedCompletedEventHandler(object sender, MarkAsUnreceivedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarkAsUnreceivedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarkAsUnreceivedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetDocumentListWithDepartmentCompletedEventHandler(object sender, GetDocumentListWithDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentListWithDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentListWithDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Document[] docList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Document[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetPrefixLastNumberListCompletedEventHandler(object sender, GetPrefixLastNumberListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrefixLastNumberListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrefixLastNumberListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public PrefixLastNumber[] resultList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PrefixLastNumber[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ActivateVUK507ServicesCompletedEventHandler(object sender, ActivateVUK507ServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateVUK507ServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateVUK507ServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ServiceActivationResult[] resultList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServiceActivationResult[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetReceiverInfoFromTurmobCompletedEventHandler(object sender, GetReceiverInfoFromTurmobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReceiverInfoFromTurmobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReceiverInfoFromTurmobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eFaturaWebServiceResultType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eFaturaWebServiceResultType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public TurmobResponseModel turmobResponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TurmobResponseModel)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591